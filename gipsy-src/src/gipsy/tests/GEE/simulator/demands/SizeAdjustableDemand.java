package gipsy.tests.GEE.simulator.demands;

import gipsy.GEE.IDP.demands.DemandSignature;
import gipsy.GEE.IDP.demands.IDemand;
import gipsy.GEE.IDP.demands.ProceduralDemand;
import gipsy.tests.GEE.simulator.GlobalDef;

/**
 * The demand with adjustable payload for space-scalability testing.
 * 
 * @author Yi Ji
 * @version $Id: SizeAdjustableDemand.java,v 1.3 2011/01/10 21:34:10 ji_yi Exp $
 */
public class SizeAdjustableDemand 
extends ProceduralDemand 
{
	/**
	 * Generated by Eclipse
	 */
	private static final long serialVersionUID = 7896407702179255966L;
	
	private static long slSerialNum = 0;
	private static Object soSerialNumLock = new Object();
	
	private byte[] atPayload = null;
	
	private long lAssignedSerialNum = 0;
	
	public SizeAdjustableDemand()
	{
		synchronized(soSerialNumLock)
		{
			if(this.atPayload == null)
			{
				this.atPayload = GlobalDef.satDemandPayload;
			}
			this.oSignature = new DemandSignature("ID " + slSerialNum);
			this.lAssignedSerialNum = slSerialNum;
			slSerialNum++;
		}
	}
	
	public void setPayload(byte[] patPayload)
	{
		this.atPayload = patPayload;
		String strUpdatedSig = null;
		if(this.atPayload != null)
		{
			strUpdatedSig = "Size "+ this.atPayload.length + " B, ID " + this.lAssignedSerialNum;
		}
		else
		{
			strUpdatedSig = "Size 0 B, ID " + this.lAssignedSerialNum;
		}
		this.oSignature.setSignature(strUpdatedSig);
	}

	
	
	public void clearPayload()
	{
		this.atPayload = null;
	}
	
	/* (non-Javadoc)
	 * @see gipsy.GEE.IDP.demands.ProceduralDemand#getSize()
	 */
	@Override
	public double getSize() 
	{
		if(this.atPayload == null)
		{
			return 0;
		}
		else
		{
			return this.atPayload.length;
		}
	}

	@Override
	public IDemand execute() 
	{
		return this;
	}
	
	
	
}
