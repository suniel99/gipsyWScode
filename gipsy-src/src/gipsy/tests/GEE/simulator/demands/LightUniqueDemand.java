package gipsy.tests.GEE.simulator.demands;

import gipsy.GEE.IDP.demands.Demand;
import gipsy.GEE.IDP.demands.DemandSignature;
import gipsy.GEE.IDP.demands.IDemand;
import gipsy.GEE.IDP.demands.ProceduralDemand;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Serializable;
import java.io.StringReader;
import java.util.Scanner;
import java.util.UUID;


/**
 * The demand to test the simulation's performance under
 * a low-load scenario: the demand generates a unique
 * signature upon creation but requires no computation.
 * 
 * @author Yi Ji
 * @version $Id: LightUniqueDemand.java,v 1.3 2010/02/18 18:07:20 mokhov Exp $
 */
public class LightUniqueDemand 
extends ProceduralDemand
{
	/**
	 * Auto-generated by eclipse.
	 */
	private static final long serialVersionUID = 8038196276581449722L;

	/**
	 * Upon creation, generate a unique ID.
	 */
	public LightUniqueDemand() 
	{
		super();
		this.oSignature = new DemandSignature(UUID.randomUUID());
	}

	/**
	 * Constructor inherited from super class, not yet used
	 * @param pstrName
	 * @see Demand#Demand(String)
	 */
	public LightUniqueDemand(String pstrName) 
	{
		super(pstrName);
	}

	/**
	 * Constructor inherited from super class, not yet used
	 * @param poSignature
	 * @see Demand#Demand(DemandSignature)
	 */
	public LightUniqueDemand(DemandSignature poSignature) 
	{
		super(poSignature);
	}

	/**
	 * Constructor inherited from super class, not yet used
	 * @param poResult
	 * @see Demand#Demand(Serializable)
	 */
	public LightUniqueDemand(Serializable poResult) 
	{
		super(poResult);
	}

	/* (non-Javadoc)
	 * @see gipsy.GEE.IDP.demands.IDemand#execute()
	 */
	@Override
	public IDemand execute() 
	{
		// Does nothing but returns immediately
		return this;
	}

	/* (non-Javadoc)
	 * @see gipsy.GEE.IDP.demands.Demand#storeResult(java.io.Serializable)
	 */
	@Override
	public DemandSignature storeResult(Serializable poDirName) 
	{
		FileOutputStream oFileOut; 
		BufferedWriter oWriterFile;
		String strFileName = poDirName.toString() + "/LightUniqueDemand" + ".txt";
		
		try
		{
			// Prepare to append the file
			oFileOut = new FileOutputStream(strFileName, true);
			oWriterFile = new BufferedWriter(new OutputStreamWriter(oFileOut, "ASCII"));
			
			PrintWriter oWriter = new PrintWriter(oWriterFile);
			
			// Write the time lines to file
			StringReader oStrReader = new StringReader(this.oTimeLine.getTimeLine());
			
			Scanner oScanner = new Scanner(oStrReader);
			String strLine = null;
			
			long lStartTime = 0;
			int iCounter = 0;
			
			while(oScanner.hasNext())
			{
				strLine = oScanner.nextLine();
				int iBegin = strLine.indexOf("Time:");
				if(iBegin == -1)
				{
					continue;
				}
				int iEnd = strLine.indexOf(" <<");
				if(iEnd == -1)
				{
					continue;
				}
				iBegin = iBegin + 6;
				String strOutput = strLine.substring(iBegin, iEnd);
				if(iCounter%2 == 0)
				{
					lStartTime = Long.parseLong(strOutput);
				}
				else
				{
					oWriter.println(Long.parseLong(strOutput)-lStartTime);
					oWriter.flush();
				}
				iCounter++;
			}
			
			oWriter.flush();
			oWriter.close(); 
			oWriterFile.close();
			oFileOut.close();
		}
		catch(IOException e)
		{
			e.printStackTrace(System.err);
		}
		
		return this.oSignature;
	}
}
