package gipsy.GIPC.intensional.GIPL;

import gipsy.GIPC.util.*;

/**
 *  Generated by JJTree automatically.
 */
public class JJTGIPLParserState {
  private java.util.Stack nodes;
  private java.util.Stack marks;

  private int sp;		// number of nodes on stack
  private int mk;		// current mark
  private boolean node_created;

  /**
   *  Constructor.
   */
  public JJTGIPLParserState() {
    nodes = new java.util.Stack();
    marks = new java.util.Stack();
    sp = 0;
    mk = 0;
  }

  /**
   * Determines whether the current node was actually closed and pushed.  
   * This should only be called in the final user action of a node scope.  
   *
   * @return <code>true</code> current node was closed and pushed.
   *         <code>false</code> current node was not closed and pushed.
   */
  public boolean nodeCreated() {
    return node_created;
  }

  /** 
   * Reinitializes the node stack.  
   * It is called automatically by the parser's ReInit() method. 
   */
  public void reset() {
    nodes.removeAllElements();
    marks.removeAllElements();
    sp = 0;
    mk = 0;
  }

  /**
   * Makes sense to call this after a successful parse. 
   *
   * @return Node type, the root node of the AST.  
   */
  public Node rootNode() {
    return (Node)nodes.elementAt(0);
  }

  /** 
   *  Pushes a node onto the stack. 
   * 
   *  @param n  the node will be pushed.
   */
  public void pushNode(Node n) {
    nodes.push(n);
    ++sp;
  }

  /** 
   *  Returns the node on the top of the stack, removes it from the stack.  
   *
   *  @return Node type, the top element of the stack.
   */
  public Node popNode() {
    if (--sp < mk) {
      mk = ((Integer)marks.pop()).intValue();
    }
    return (Node)nodes.pop();
  }

  /** 
   *  Returns the node currently on the top of the stack. 
   *
   *  @return Node type, the top element of the stack.
   */
  public Node peekNode() {
    return (Node)nodes.peek();
  }

  /**
   *  Returns the number of children on the stack in the current node scope. 
   *
   *  @return the Integer value of the number.
   */
  public int nodeArity() {
    return sp - mk;
  }


  /**
   *  Clears the current node scope.
   *
   *  @param n  the current Node.
   */
  public void clearNodeScope(Node n) {
    while (sp > mk) {
      popNode();
    }
    mk = ((Integer)marks.pop()).intValue();
  }


  /**
   *  Opens the current node scope.
   *
   *  @param n the current Node.
   */
  public void openNodeScope(Node n) {
    marks.push(new Integer(mk));
    mk = sp;
    n.jjtOpen();
  }


  /** 
   *  Constructs a definite node from a specified number of children.  
   *  Pops that number of nodes from the stack, makes the children of the definite node,  
   *  pushes the definite node on to the stack. 
   *
   *  @param n  the definite Node.
   *  @param num  the Integer value of number of children.
   */
  public void closeNodeScope(Node n, int num) {
    mk = ((Integer)marks.pop()).intValue();
    while (num-- > 0) {
      Node c = popNode();
      c.jjtSetParent(n);
      n.jjtAddChild(c, num);
    }
    n.jjtClose();
    pushNode(n);
    node_created = true;
  }


  /**
   * Constructs a conditional node if its condition is true.  
   *
   * All the nodes that have been pushed since the node was opened are
   * made children of the the conditional node, which is then pushed
   * on to the stack.  If the condition is false the node is not
   * constructed and they are left on the stack. 
   *
   * @param n the conditional Node.
   * @param condition give the Boolean value if the condition is true.
   */  
  public void closeNodeScope(Node n, boolean condition) {
    if (condition) {
      int a = nodeArity();
      mk = ((Integer)marks.pop()).intValue();
      while (a-- > 0) {
	Node c = popNode();
	c.jjtSetParent(n);
	n.jjtAddChild(c, a);
      }
      n.jjtClose();
      pushNode(n);
      node_created = true;
    } else {
      mk = ((Integer)marks.pop()).intValue();
      node_created = false;
    }
  }
}
