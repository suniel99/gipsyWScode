/* Generated By:JJTree&JavaCC: Do not edit this line. GIPLParser.java */
package gipsy.GIPC.intensional.GIPL;

import gipsy.GIPC.intensional.SimpleNode;
import gipsy.GIPC.util.Node;
import gipsy.GIPC.util.ParseException;
import gipsy.GIPC.util.SimpleCharStream;
import gipsy.GIPC.util.Token;
import gipsy.GIPC.util.TokenMgrError;
import gipsy.interfaces.AbstractSyntaxTree;


/**
 * Does syntactic anlysis, outputs an AST.
 * Generated by JavaCC automatically.
 *
 * $Id: GIPLParser.java,v 1.17 2007/11/02 21:59:41 aihua_wu Exp $
 *
 * @author Chun Lei Ren
 * @author Serguei Mokhov
 *
 * @see GIPLParserTreeConstants Provides the constants definition for an AST.
 * @see GIPLParserConstants     Provides the constants definition for parser.
 */
public class GIPLParser/*@bgen(jjtree)*/implements GIPLParserTreeConstants, GIPLParserConstants {/*@bgen(jjtree)*/
  protected JJTGIPLParserState jjtree = new JJTGIPLParserState();/**
	 * Error count.
	 */
        private int iErrorCount = 0;

        /**
	 * Retrieves number of parse erros.
	 * @return abstract syntax tree if parse was successful; null otherwise.
	 */
        public AbstractSyntaxTree parse()
        {
                try
                {
                        // startParse() is the start state
                        SimpleNode oRoot = startParse();
                        //System.err.println("GIPL Parser, $Revision: 1.17 $: " + this.iErrorCount + " errors.");
                        return new AbstractSyntaxTree(oRoot);
                }
                catch(ParseException e)
                {
                        System.err.println(e);
                        e.printStackTrace(System.err);
                        return null;
                }
        }

        /**
	 * Retrieves number of parse erros.
	 * @return error count
	 */
        public int getErrorCount()
        {
                return this.iErrorCount;
        }

  void countErrors() throws ParseException {
        this.iErrorCount++;
  }

/**
 * We start parsing GIPL here.
 */
  final public SimpleNode startParse() throws ParseException {
                                  /*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        E();
        jj_consume_token(0);
                        {if (true) return jjtn000;}
      } catch (ParseException e) {
                countErrors();
                System.err.println(e.toString());
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * E().
 */
  final public void E() throws ParseException {
    try {
      if (jj_2_3(5)) {
              SimpleNode jjtn001 = new SimpleNode(JJTIF);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(IF);
          E();
          jj_consume_token(THEN);
          E();
          jj_consume_token(ELSE);
          E();
          jj_consume_token(FI);
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
        }
        E1();
      } else if (jj_2_4(5)) {
                SimpleNode jjtn002 = new SimpleNode(JJTHASH);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(HASH);
          jj_consume_token(DOT);
          E();
        } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte002;}
                }
                if (jjte002 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte002;}
                }
                {if (true) throw (Error)jjte002;}
        } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
        }
        E1();
      } else if (jj_2_5(5)) {
        term();
        E1();
      } else if (jj_2_6(5)) {
        if (jj_2_1(5)) {
                    SimpleNode jjtn003 = new SimpleNode(JJTPOSI);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(PLUS);
          } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
          }
        } else if (jj_2_2(5)) {
                                   SimpleNode jjtn004 = new SimpleNode(JJTNEGE);
                                   boolean jjtc004 = true;
                                   jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(MINUS);
          } finally {
                                   if (jjtc004) {
                                     jjtree.closeNodeScope(jjtn004, true);
                                   }
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        term();
                                Node midNode1 = jjtree.popNode(); // Term
                        Node midNode2 = jjtree.popNode(); // Sign
                                midNode1.jjtSetParent(midNode2);
                                midNode2.jjtAddChild(midNode1, 0);
                                jjtree.pushNode(midNode2);
        E1();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                countErrors();
                System.err.println(e.toString());
    }
  }

/**
 * E1().
 */
  final public void E1() throws ParseException {
    try {
      if (jj_2_21(5)) {
        if (jj_2_16(5)) {
          if (jj_2_7(5)) {
                              SimpleNode jjtn001 = new SimpleNode(JJTADD);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
            try {
              jj_consume_token(PLUS);
            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
            }
          } else if (jj_2_8(5)) {
                                            SimpleNode jjtn002 = new SimpleNode(JJTMIN);
                                            boolean jjtc002 = true;
                                            jjtree.openNodeScope(jjtn002);
            try {
              jj_consume_token(MINUS);
            } finally {
                                            if (jjtc002) {
                                              jjtree.closeNodeScope(jjtn002, true);
                                            }
            }
          } else if (jj_2_9(5)) {
                                                           SimpleNode jjtn003 = new SimpleNode(JJTOR);
                                                           boolean jjtc003 = true;
                                                           jjtree.openNodeScope(jjtn003);
            try {
              jj_consume_token(OR);
            } finally {
                                                           if (jjtc003) {
                                                             jjtree.closeNodeScope(jjtn003, true);
                                                           }
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          term();
                                Node midNode1 = jjtree.popNode(); // right
                        Node oAddNode = jjtree.popNode(); // AddOp
                                Node midNode3 = jjtree.popNode(); // left
                                midNode1.jjtSetParent(oAddNode);
                                midNode3.jjtSetParent(oAddNode);
                                oAddNode.jjtAddChild(midNode3, 0);
                                oAddNode.jjtAddChild(midNode1, 1);
                                jjtree.pushNode(oAddNode);
          E1();
        } else if (jj_2_17(5)) {
          if (jj_2_10(5)) {
                                SimpleNode jjtn004 = new SimpleNode(JJTLT);
                                boolean jjtc004 = true;
                                jjtree.openNodeScope(jjtn004);
            try {
              jj_consume_token(LT);
            } finally {
                                if (jjtc004) {
                                  jjtree.closeNodeScope(jjtn004, true);
                                }
            }
          } else if (jj_2_11(5)) {
                                           SimpleNode jjtn005 = new SimpleNode(JJTGT);
                                           boolean jjtc005 = true;
                                           jjtree.openNodeScope(jjtn005);
            try {
              jj_consume_token(GT);
            } finally {
                                           if (jjtc005) {
                                             jjtree.closeNodeScope(jjtn005, true);
                                           }
            }
          } else if (jj_2_12(5)) {
                                                      SimpleNode jjtn006 = new SimpleNode(JJTGE);
                                                      boolean jjtc006 = true;
                                                      jjtree.openNodeScope(jjtn006);
            try {
              jj_consume_token(GE);
            } finally {
                                                      if (jjtc006) {
                                                        jjtree.closeNodeScope(jjtn006, true);
                                                      }
            }
          } else if (jj_2_13(5)) {
                                                                 SimpleNode jjtn007 = new SimpleNode(JJTLE);
                                                                 boolean jjtc007 = true;
                                                                 jjtree.openNodeScope(jjtn007);
            try {
              jj_consume_token(LE);
            } finally {
                                                                 if (jjtc007) {
                                                                   jjtree.closeNodeScope(jjtn007, true);
                                                                 }
            }
          } else if (jj_2_14(5)) {
                                                                            SimpleNode jjtn008 = new SimpleNode(JJTEQ);
                                                                            boolean jjtc008 = true;
                                                                            jjtree.openNodeScope(jjtn008);
            try {
              jj_consume_token(EQ);
            } finally {
                                                                            if (jjtc008) {
                                                                              jjtree.closeNodeScope(jjtn008, true);
                                                                            }
            }
          } else if (jj_2_15(5)) {
                                                                                       SimpleNode jjtn009 = new SimpleNode(JJTNE);
                                                                                       boolean jjtc009 = true;
                                                                                       jjtree.openNodeScope(jjtn009);
            try {
              jj_consume_token(NE);
            } finally {
                                                                                       if (jjtc009) {
                                                                                         jjtree.closeNodeScope(jjtn009, true);
                                                                                       }
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          E();
                                Node midNode1 = jjtree.popNode(); // right
                                Node midNode2 = jjtree.popNode(); // RelOp
                                Node midNode3 = jjtree.popNode(); // left
                                midNode1.jjtSetParent(midNode2);
                                midNode3.jjtSetParent(midNode2);
                                midNode2.jjtAddChild(midNode3, 0);
                                midNode2.jjtAddChild(midNode1, 1);
                                jjtree.pushNode(midNode2);
          E1();
        } else if (jj_2_18(5)) {
                              SimpleNode jjtn010 = new SimpleNode(JJTAT);
                              boolean jjtc010 = true;
                              jjtree.openNodeScope(jjtn010);
          try {
            jj_consume_token(AT);
          } finally {
                              if (jjtc010) {
                                jjtree.closeNodeScope(jjtn010, true);
                              }
          }
          jj_consume_token(DOT);
          E();
          E();
                                Node midNode1 = jjtree.popNode(); // right1
                                Node midNode2 = jjtree.popNode(); // right2
                                Node midNode3 = jjtree.popNode(); // AT
                                Node midNode4 = jjtree.popNode(); // left
                                midNode1.jjtSetParent(midNode3);
                                midNode2.jjtSetParent(midNode3);
                                midNode4.jjtSetParent(midNode3);
                                midNode3.jjtAddChild(midNode4, 0);
                                midNode3.jjtAddChild(midNode2, 1);
                                midNode3.jjtAddChild(midNode1, 2);
                                jjtree.pushNode(midNode3);
          E1();
        } else if (jj_2_19(5)) {
                              SimpleNode jjtn011 = new SimpleNode(JJTWHERE);
                              boolean jjtc011 = true;
                              jjtree.openNodeScope(jjtn011);
          try {
            jj_consume_token(WHERE);
          } finally {
                              if (jjtc011) {
                                jjtree.closeNodeScope(jjtn011, true);
                              }
          }
          Q();
          jj_consume_token(END);
                                Node midNode1 = jjtree.popNode(); // right
                                Node midNode2 = jjtree.popNode(); // WHERE
                                Node midNode3 = jjtree.popNode(); // left
                                midNode1.jjtSetParent(midNode2);
                                midNode3.jjtSetParent(midNode2);
                                midNode2.jjtAddChild(midNode3, 0);
                                midNode2.jjtAddChild(midNode1, 1);
                                jjtree.pushNode(midNode2);
          E1();
        } else if (jj_2_20(5)) {
          Tail();
          E1();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } catch (ParseException e) {
                countErrors();
                System.err.println(e.toString());
    }
  }

/**
 * This Tail and the QTail later are not to be considered so far.
 */
  final public void Tail() throws ParseException {
    try {
      jj_consume_token(LBRACKET);
      E();
      label_1:
      while (true) {
        if (jj_2_22(5)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(COMMA);
        E();
      }
      jj_consume_token(RBRACKET);
      jj_consume_token(LPAREN);
      E();
      label_2:
      while (true) {
        if (jj_2_23(5)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(COMMA);
        E();
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
                countErrors();
                System.err.println(e.toString());
    }
  }

  final public void term() throws ParseException {
    factor();
    if (jj_2_24(5)) {
      multTerm();
    } else {
      ;
    }
  }

  final public void multTerm() throws ParseException {
    if (jj_2_25(5)) {
              SimpleNode jjtn001 = new SimpleNode(JJTTIMES);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TIMES);
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
    } else if (jj_2_26(5)) {
                               SimpleNode jjtn002 = new SimpleNode(JJTDIV);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(DIV);
      } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
      }
    } else if (jj_2_27(5)) {
                                            SimpleNode jjtn003 = new SimpleNode(JJTMOD);
                                            boolean jjtc003 = true;
                                            jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(MOD);
      } finally {
                                            if (jjtc003) {
                                              jjtree.closeNodeScope(jjtn003, true);
                                            }
      }
    } else if (jj_2_28(5)) {
                                                         SimpleNode jjtn004 = new SimpleNode(JJTAND);
                                                         boolean jjtc004 = true;
                                                         jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(AND);
      } finally {
                                                         if (jjtc004) {
                                                           jjtree.closeNodeScope(jjtn004, true);
                                                         }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    term();
                Node midNode1 = jjtree.popNode(); // right
                Node midNode2 = jjtree.popNode(); // MultOp
                Node midNode3 = jjtree.popNode(); // left
                midNode1.jjtSetParent(midNode2);
                midNode3.jjtSetParent(midNode2);
                midNode2.jjtAddChild(midNode3, 0);
                midNode2.jjtAddChild(midNode1, 1);
                jjtree.pushNode(midNode2);
    multTerm();
  }

  final public void factor() throws ParseException {
    if (jj_2_29(5)) {
      ID();
    } else if (jj_2_30(5)) {
      CONST();
    } else if (jj_2_31(5)) {
      jj_consume_token(LPAREN);
      E();
      jj_consume_token(RPAREN);
    } else if (jj_2_32(5)) {
            SimpleNode jjtn001 = new SimpleNode(JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(NOT);
        jj_consume_token(LPAREN);
        E();
        jj_consume_token(RPAREN);
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Q() throws ParseException {
    try {
      if (jj_2_37(5)) {
                  SimpleNode jjtn001 = new SimpleNode(JJTDIMENSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(DIMENSION);
          ID();
          label_3:
          while (true) {
            if (jj_2_33(5)) {
              ;
            } else {
              break label_3;
            }
            jj_consume_token(COMMA);
            ID();
          }
          jj_consume_token(SEMICOLON);
          label_4:
          while (true) {
            if (jj_2_34(5)) {
              ;
            } else {
              break label_4;
            }
            Q();
          }
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
        }
      } else if (jj_2_38(5)) {
                    SimpleNode jjtn002 = new SimpleNode(JJTASSIGN);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
        try {
          ID();
          if (jj_2_35(5)) {
            QTail();
          } else {
            ;
          }
          jj_consume_token(ASSIGN);
          E();
          jj_consume_token(SEMICOLON);
          label_5:
          while (true) {
            if (jj_2_36(5)) {
              ;
            } else {
              break label_5;
            }
            Q();
          }
        } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                countErrors();
                System.err.println(e.toString());

                Token oToken;
                do
                {
                        oToken = getNextToken();
                }
                while(oToken.kind != SEMICOLON);
    }
  }

  final public void QTail() throws ParseException {
    try {
      jj_consume_token(LBRACKET);
      ID();
      label_6:
      while (true) {
        if (jj_2_39(5)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
        ID();
      }
      jj_consume_token(RBRACKET);
      jj_consume_token(LPAREN);
      ID();
      label_7:
      while (true) {
        if (jj_2_40(5)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(COMMA);
        ID();
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
                countErrors();
                System.err.println(e.toString());

                // Skip until we find a semicolon
                Token oToken;

                do
                {
                        oToken = getNextToken();
                }
                while(oToken.kind != SEMICOLON);
    }
  }

/**
 * Note: Because of the scope issue, we have to put #ID at this
 * position so that jjtThis can work properly.
 */
  final public void ID() throws ParseException {
 /*@bgen(jjtree) ID */
        SimpleNode jjtn000 = new SimpleNode(JJTID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      // for example, we cannot put #ID over here, or jjtThis
              // will not refer to Node ID.
              oToken = jj_consume_token(ID);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setImage(oToken.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CONST() throws ParseException {
 /*@bgen(jjtree) CONST */
        SimpleNode jjtn000 = new SimpleNode(JJTCONST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      oToken = jj_consume_token(CONST);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setImage(oToken.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    }
    if (jj_3R_10()) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    if (jj_3R_10()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_8()) return true;
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(DIMENSION)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    if (jj_3R_10()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_13()) return true;
    return false;
  }

  public GIPLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[40];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public GIPLParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GIPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public GIPLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GIPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public GIPLParser(GIPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(GIPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[53];
    for (int i = 0; i < 53; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 40; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
