/* Generated By:JJTree&JavaCC: Do not edit this line. IndexicalLucidParserConstants.java */
package gipsy.GIPC.intensional.SIPL.IndexicalLucid;

public interface IndexicalLucidParserConstants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 6;
  int FORMAL_COMMENT = 7;
  int MULTI_LINE_COMMENT = 8;
  int DIMENSION = 9;
  int ELSE = 10;
  int END = 11;
  int FI = 12;
  int IF = 13;
  int THEN = 14;
  int WHERE = 15;
  int ASSIGN = 16;
  int GT = 17;
  int LT = 18;
  int EQ = 19;
  int LE = 20;
  int GE = 21;
  int NE = 22;
  int OR = 23;
  int AND = 24;
  int NOT = 25;
  int BITAND = 26;
  int BITOR = 27;
  int PLUS = 28;
  int MINUS = 29;
  int STAR = 30;
  int SLASH = 31;
  int REM = 32;
  int ASA = 33;
  int FBY = 34;
  int UPON = 35;
  int WVR = 36;
  int FIRST = 37;
  int NEXT = 38;
  int PREV = 39;
  int ISEOD = 40;
  int AT = 41;
  int WHEN = 42;
  int INTEGER_LITERAL = 43;
  int DECIMAL_LITERAL = 44;
  int HEX_LITERAL = 45;
  int OCTAL_LITERAL = 46;
  int FLOATING_POINT_LITERAL = 47;
  int EXPONENT = 48;
  int CHARACTER_LITERAL = 49;
  int STRING_LITERAL = 50;
  int ID = 51;
  int LETTER = 52;
  int DIGIT = 53;
  int LPAREN = 54;
  int RPAREN = 55;
  int LBRACKET = 56;
  int RBRACKET = 57;
  int SEMICOLON = 58;
  int COMMA = 59;
  int DOT = 60;
  int ILLEGALCHAR = 61;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"dimension\"",
    "\"else\"",
    "\"end\"",
    "\"fi\"",
    "\"if\"",
    "\"then\"",
    "\"where\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"&\"",
    "\"|\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"asa\"",
    "\"fby\"",
    "\"upon\"",
    "\"wvr\"",
    "\"first\"",
    "\"next\"",
    "\"prev\"",
    "\"iseod\"",
    "\"@\"",
    "\"#\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "<ILLEGALCHAR>",
  };

}
