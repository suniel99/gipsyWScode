/* Generated By:JJTree&JavaCC: Do not edit this line. LucxParser.java */
package gipsy.GIPC.intensional.SIPL.Lucx;
import gipsy.GIPC.intensional.SimpleNode;
import gipsy.GIPC.util.Node;
import gipsy.GIPC.util.ParseException;
import gipsy.GIPC.util.SimpleCharStream;
import gipsy.GIPC.util.Token;
import gipsy.GIPC.util.TokenMgrError;
import gipsy.interfaces.AbstractSyntaxTree;
import marf.util.Debug;
import java.util.*;
import gipsy.storage.Dictionary;


/**
 * Does syntactic analysis, outputs an AST. Focuses on the Lucx.
 * Generated by JavaCC automatically.
 *
 * $Id: LucxParser.java,v 1.3 2007/09/12 18:16:32 x_ton Exp $
 *
 * @author 
 * @version $Revision: 1.3 $
 * @see LucxTreeConstants Provides the constants definition for an AST.
 * @see LucxConstants     Provides the constants definition for parser.
 */
public class LucxParser/*@bgen(jjtree)*/implements LucxParserTreeConstants, LucxParserConstants {/*@bgen(jjtree)*/
  protected JJTLucxParserState jjtree = new JJTLucxParserState();/**
	 * Error count.
	 */
        private int iErrorCount = 0;
        private int semanticErrorCount=0;
        private Dictionary lucxDictionary;
        private int tagsetflag=0; //this is the flag for different tag set expressions within one tag set type. 
                                  //OrderedFiniteNonperiodic==>0:enumerated {1,2,3}; 1:upper and lower boundary; 2:upper and lower boundary and step
                                  //OrderedInfiniteNonperiodic==>3:upper boudary{...100}; 4:upper boundary with step{...100 /2}; 5:lower boundary{2...}; 6:lower boundary with step{2... /2}; 7:int


        /**
	 * Parses presumably a Lucx program and produces an AST
	 * @return abstract syntax tree if parse was successful; null otherwise.
	 */
        public AbstractSyntaxTree parse()
        {
                try
                {
                        System.err.println("Lucx Parser Version $Revision: 1.3 $");
                        lucxDictionary=new Dictionary();
                        SimpleNode oRoot = startParse(); /* the start state */
                        System.err.println("Errors: " + this.iErrorCount);
                        return new AbstractSyntaxTree(oRoot);
                }
                catch(ParseException e)
                {
                        System.err.println(e);
                        e.printStackTrace(System.err);
                        return null;
                }
        }

        /**
	 * Retrieves number of parse errors.
	 * @return error count
	 * @since Serguei
	 */
        public int getErrorCount()
        {
                return this.iErrorCount;
        }


        public static SimpleNode biOp(SimpleNode node1, SimpleNode node2, SimpleNode node3)
        throws ParseException
        {
                node1.jjtSetParent(node2);
                node3.jjtSetParent(node2);
                node2.jjtAddChild(node3, 0);
                node2.jjtAddChild(node1, 1);

                return node2;
        }

        public static SimpleNode where(SimpleNode node1, SimpleNode node2, SimpleNode node3)
        throws ParseException //#Qlist is the list that contains several Qs, these Qs are finally made children to the #where node
        {
                node3.jjtSetParent(node2);
                node2.jjtAddChild(node3, 0);

                if(node1.children != null)
                {
                        int i = node1.children.length;
                        SimpleNode interNode;

                        for(int j = 0; j < i; j++)
                        {
                                interNode = (SimpleNode)node1.children[j];
                                interNode.jjtSetParent(node2);
                                node2.jjtAddChild(interNode, j+1);
                        }
                }

                return node2;
        }

  void countErrors() throws ParseException {
        this.iErrorCount++;
  }

  SimpleNode sign(SimpleNode node1, SimpleNode node2) throws ParseException {
        node1.jjtSetParent(node2);
        node2.jjtAddChild(node1, 0);
        return node2;
  }

  SimpleNode function(SimpleNode node1, SimpleNode node2, SimpleNode node3, SimpleNode node4) throws ParseException {
        node4.jjtSetParent(node1);
        node3.jjtSetParent(node1);
        node2.jjtSetParent(node1);
        node1.jjtAddChild(node4, 0);
        node1.jjtAddChild(node3, 1);
        node1.jjtAddChild(node2, 2);
        return node1;
  }

  SimpleNode uniOp(SimpleNode node1, SimpleNode node2) throws ParseException {
        node1.jjtSetParent(node2);
        node2.jjtAddChild(node1, 0);
        return node2;
  }

  SimpleNode ifClause(SimpleNode node1, SimpleNode node2, SimpleNode node3, SimpleNode node4) throws ParseException {
        node2.jjtSetParent(node1);
        node3.jjtSetParent(node1);
        node4.jjtSetParent(node1);
        node1.jjtAddChild(node2, 0);
        node1.jjtAddChild(node3, 1);
        node1.jjtAddChild(node4, 2);

        return node1;
  }

  SimpleNode makeQlist(SimpleNode child, SimpleNode parent) throws ParseException {
        child.jjtSetParent(parent);

        if (parent.children!=null)
            parent.jjtAddChild(child, parent.children.length);
        else
            parent.jjtAddChild(child, 0);

        return parent;
  }

  SimpleNode assign(SimpleNode node1, SimpleNode node2, SimpleNode node3) throws ParseException {
        node1.jjtSetParent(node2);
        node3.jjtSetParent(node2);
        node2.jjtAddChild(node1, 0);
        node2.jjtAddChild(node3, 1);

        return node2;
  }

  final public SimpleNode startParse() throws ParseException {
                                  /*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        E();
        jj_consume_token(0);
                        {if (true) return jjtn000;}
      } catch (ParseException e) {
                countErrors();
                System.err.println("Lucx Parser: " + e.toString());
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void E() throws ParseException {
    try {
      if (jj_2_3(6)) {
                  SimpleNode jjtn001 = new SimpleNode(JJTASSIGN);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          ID();
          jj_consume_token(ASSIGN);
          E();
          E1();
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
        }
        E1();
      } else if (jj_2_4(6)) {
                   SimpleNode jjtn002 = new SimpleNode(JJTIF);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(IF);
          E();
          jj_consume_token(THEN);
          E();
          jj_consume_token(ELSE);
          E();
          jj_consume_token(FI);
        } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
        } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
        }
        E1();
      } else if (jj_2_5(6)) {
                          SimpleNode jjtn003 = new SimpleNode(JJTHASH);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(WHEN);
          E();
        } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte003;}
                          }
                          if (jjte003 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte003;}
                          }
                          {if (true) throw (Error)jjte003;}
        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
        }
        E1();
      } else if (jj_2_6(6)) {
        Term();
        E1();
      } else if (jj_2_7(6)) {
        if (jj_2_1(6)) {
                              SimpleNode jjtn004 = new SimpleNode(JJTPOSI);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(PLUS);
          } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, true);
                              }
          }
        } else if (jj_2_2(6)) {
                                             SimpleNode jjtn005 = new SimpleNode(JJTNEGE);
                                             boolean jjtc005 = true;
                                             jjtree.openNodeScope(jjtn005);
          try {
            jj_consume_token(MINUS);
          } finally {
                                             if (jjtc005) {
                                               jjtree.closeNodeScope(jjtn005, true);
                                             }
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        Term();
                                SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // Term
                                SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); // sign
                                SimpleNode node = sign(midNode1, midNode2);
                                jjtree.pushNode(node);
        E1();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                countErrors();
                System.err.println("Lucx Parser: " + e.toString());
    }
  }

  final public void E1() throws ParseException {
    try {
      if (jj_2_26(6)) {
        if (jj_2_17(6)) {
          if (jj_2_8(6)) {
            SimpleNode jjtn001 = new SimpleNode(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            try {
              jj_consume_token(PLUS);
            } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
            }
          } else if (jj_2_9(6)) {
                       SimpleNode jjtn002 = new SimpleNode(JJTMIN);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
            try {
              jj_consume_token(MINUS);
            } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
            }
          } else if (jj_2_10(6)) {
                                  SimpleNode jjtn003 = new SimpleNode(JJTOR);
                                  boolean jjtc003 = true;
                                  jjtree.openNodeScope(jjtn003);
            try {
              jj_consume_token(OR);
            } finally {
                                  if (jjtc003) {
                                    jjtree.closeNodeScope(jjtn003, true);
                                  }
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          Term();
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // right (Term in this production)
           SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // #biOp
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left(Term in E -> Term E1)
           SimpleNode node=biOp(midNode1, midNode2, midNode3);
           jjtree.pushNode(node);
          E1();
        } else if (jj_2_18(6)) {
          if (jj_2_11(6)) {
           SimpleNode jjtn004 = new SimpleNode(JJTLT);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
            try {
              jj_consume_token(LT);
            } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004, true);
           }
            }
          } else if (jj_2_12(6)) {
                     SimpleNode jjtn005 = new SimpleNode(JJTGT);
                     boolean jjtc005 = true;
                     jjtree.openNodeScope(jjtn005);
            try {
              jj_consume_token(GT);
            } finally {
                     if (jjtc005) {
                       jjtree.closeNodeScope(jjtn005, true);
                     }
            }
          } else if (jj_2_13(6)) {
                               SimpleNode jjtn006 = new SimpleNode(JJTGE);
                               boolean jjtc006 = true;
                               jjtree.openNodeScope(jjtn006);
            try {
              jj_consume_token(GE);
            } finally {
                               if (jjtc006) {
                                 jjtree.closeNodeScope(jjtn006, true);
                               }
            }
          } else if (jj_2_14(6)) {
                                          SimpleNode jjtn007 = new SimpleNode(JJTLE);
                                          boolean jjtc007 = true;
                                          jjtree.openNodeScope(jjtn007);
            try {
              jj_consume_token(LE);
            } finally {
                                          if (jjtc007) {
                                            jjtree.closeNodeScope(jjtn007, true);
                                          }
            }
          } else if (jj_2_15(6)) {
                                                     SimpleNode jjtn008 = new SimpleNode(JJTEQ);
                                                     boolean jjtc008 = true;
                                                     jjtree.openNodeScope(jjtn008);
            try {
              jj_consume_token(EQ);
            } finally {
                                                     if (jjtc008) {
                                                       jjtree.closeNodeScope(jjtn008, true);
                                                     }
            }
          } else if (jj_2_16(6)) {
                                                                SimpleNode jjtn009 = new SimpleNode(JJTNE);
                                                                boolean jjtc009 = true;
                                                                jjtree.openNodeScope(jjtn009);
            try {
              jj_consume_token(NE);
            } finally {
                                                                if (jjtc009) {
                                                                  jjtree.closeNodeScope(jjtn009, true);
                                                                }
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          E();
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // right
           SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // relOp
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left
           SimpleNode node=biOp(midNode1, midNode2, midNode3);
           jjtree.pushNode(node);
          E1();
        } else if (jj_2_19(6)) {
          SimpleNode jjtn010 = new SimpleNode(JJTAT);
          boolean jjtc010 = true;
          jjtree.openNodeScope(jjtn010);
          try {
            jj_consume_token(AT);
          } finally {
          if (jjtc010) {
            jjtree.closeNodeScope(jjtn010, true);
          }
          }
          E();
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // right
           SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // at
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left

           SimpleNode node=biOp(midNode1, midNode2, midNode3);
           jjtree.pushNode(node);
          E1();
        } else if (jj_2_20(6)) {
         SimpleNode jjtn011 = new SimpleNode(JJTWHERE);
         boolean jjtc011 = true;
         jjtree.openNodeScope(jjtn011);
          try {
            jj_consume_token(WHERE);
          } finally {
         if (jjtc011) {
           jjtree.closeNodeScope(jjtn011, true);
         }
          }
                        SimpleNode jjtn012 = new SimpleNode(JJTQLIST);
                        boolean jjtc012 = true;
                        jjtree.openNodeScope(jjtn012);
          try {
            Q();
          } catch (Throwable jjte012) {
                        if (jjtc012) {
                          jjtree.clearNodeScope(jjtn012);
                          jjtc012 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte012 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte012;}
                        }
                        if (jjte012 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte012;}
                        }
                        {if (true) throw (Error)jjte012;}
          } finally {
                        if (jjtc012) {
                          jjtree.closeNodeScope(jjtn012, true);
                        }
          }
          jj_consume_token(END);
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // #Qlist
       SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // #Where
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left (E)
           SimpleNode node=where(midNode1, midNode2, midNode3);
           jjtree.pushNode(node);
          E1();
        } else if (jj_2_21(6)) {
          Tail();
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); //#FUN
       SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // #paras
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // #dim
           SimpleNode midNode4=(SimpleNode) jjtree.popNode();// #ID(function name)
           SimpleNode node=function(midNode1, midNode2, midNode3, midNode4);
           jjtree.pushNode(node);
          E1();
        } else if (jj_2_22(6)) {
           SimpleNode jjtn013 = new SimpleNode(JJTFBY);
           boolean jjtc013 = true;
           jjtree.openNodeScope(jjtn013);
          try {
            jj_consume_token(FBY);
          } finally {
           if (jjtc013) {
             jjtree.closeNodeScope(jjtn013, true);
           }
          }
          E();
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // E
           SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // fby
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left
           SimpleNode node=biOp(midNode1, midNode2,midNode3);
           jjtree.pushNode(node);
          E1();
        } else if (jj_2_23(6)) {
             SimpleNode jjtn014 = new SimpleNode(JJTWVR);
             boolean jjtc014 = true;
             jjtree.openNodeScope(jjtn014);
          try {
            jj_consume_token(WVR);
          } finally {
             if (jjtc014) {
               jjtree.closeNodeScope(jjtn014, true);
             }
          }
          E();
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // E
           SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // wvr
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left
           SimpleNode node=biOp(midNode1, midNode2, midNode3);
           jjtree.pushNode(node);
          E1();
        } else if (jj_2_24(6)) {
              SimpleNode jjtn015 = new SimpleNode(JJTASA);
              boolean jjtc015 = true;
              jjtree.openNodeScope(jjtn015);
          try {
            jj_consume_token(ASA);
          } finally {
              if (jjtc015) {
                jjtree.closeNodeScope(jjtn015, true);
              }
          }
          E();
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // id-right
           SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // asa
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left
           SimpleNode node=biOp(midNode1, midNode2, midNode3);
           jjtree.pushNode(node);
          E1();
        } else if (jj_2_25(6)) {
            SimpleNode jjtn016 = new SimpleNode(JJTUPON);
            boolean jjtc016 = true;
            jjtree.openNodeScope(jjtn016);
          try {
            jj_consume_token(UPON);
          } finally {
            if (jjtc016) {
              jjtree.closeNodeScope(jjtn016, true);
            }
          }
          E();
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // id-right
           SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // upon
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left
           SimpleNode node=biOp(midNode1, midNode2, midNode3);
           jjtree.pushNode(node);
          E1();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } catch (ParseException e) {
    countErrors();
    System.out.println(e.toString());
    }
  }

// Modified
  final public void Tail() throws ParseException {
    try {
      if (jj_2_30(6)) {
        jj_consume_token(LBRACKET);
                              SimpleNode jjtn001 = new SimpleNode(JJTDIM);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          E();
          label_1:
          while (true) {
            if (jj_2_27(6)) {
              ;
            } else {
              break label_1;
            }
            jj_consume_token(COMMA);
            E();
          }
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
        }
        jj_consume_token(RBRACKET);
        jj_consume_token(LPAREN);
                                                                                SimpleNode jjtn002 = new SimpleNode(JJTPARAS);
                                                                                boolean jjtc002 = true;
                                                                                jjtree.openNodeScope(jjtn002);
        try {
          E();
          label_2:
          while (true) {
            if (jj_2_28(6)) {
              ;
            } else {
              break label_2;
            }
            jj_consume_token(COMMA);
            E();
          }
        } catch (Throwable jjte002) {
                                                                                if (jjtc002) {
                                                                                  jjtree.clearNodeScope(jjtn002);
                                                                                  jjtc002 = false;
                                                                                } else {
                                                                                  jjtree.popNode();
                                                                                }
                                                                                if (jjte002 instanceof RuntimeException) {
                                                                                  {if (true) throw (RuntimeException)jjte002;}
                                                                                }
                                                                                if (jjte002 instanceof ParseException) {
                                                                                  {if (true) throw (ParseException)jjte002;}
                                                                                }
                                                                                {if (true) throw (Error)jjte002;}
        } finally {
                                                                                if (jjtc002) {
                                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                                }
        }
                                                                                                                 SimpleNode jjtn003 = new SimpleNode(JJTFUN);
                                                                                                                 boolean jjtc003 = true;
                                                                                                                 jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(RPAREN);
        } finally {
                                                                                                                 if (jjtc003) {
                                                                                                                   jjtree.closeNodeScope(jjtn003, true);
                                                                                                                 }
        }
      } else if (jj_2_31(6)) {
        jj_consume_token(LPAREN);
                             SimpleNode jjtn004 = new SimpleNode(JJTPARAS);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
        try {
          E();
          label_3:
          while (true) {
            if (jj_2_29(6)) {
              ;
            } else {
              break label_3;
            }
            jj_consume_token(COMMA);
            E();
          }
        } catch (Throwable jjte004) {
                             if (jjtc004) {
                               jjtree.clearNodeScope(jjtn004);
                               jjtc004 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte004 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte004;}
                             }
                             if (jjte004 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte004;}
                             }
                             {if (true) throw (Error)jjte004;}
        } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
        }
                                                              SimpleNode jjtn005 = new SimpleNode(JJTFUN);
                                                              boolean jjtc005 = true;
                                                              jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(RPAREN);
        } finally {
                                                              if (jjtc005) {
                                                                jjtree.closeNodeScope(jjtn005, true);
                                                              }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
            countErrors();
            System.err.println(e.toString());
            e.printStackTrace(System.err);
    }
  }

  final public void Term() throws ParseException {
    factor();
    Term1();
  }

  final public void Term1() throws ParseException {
    if (jj_2_51(6)) {
      if (jj_2_32(6)) {
          SimpleNode jjtn001 = new SimpleNode(JJTTIMES);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(STAR);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
      } else if (jj_2_33(6)) {
                       SimpleNode jjtn002 = new SimpleNode(JJTDIV);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(SLASH);
        } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
        }
      } else if (jj_2_34(6)) {
                                  SimpleNode jjtn003 = new SimpleNode(JJTMOD);
                                  boolean jjtc003 = true;
                                  jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(REM);
        } finally {
                                  if (jjtc003) {
                                    jjtree.closeNodeScope(jjtn003, true);
                                  }
        }
      } else if (jj_2_35(6)) {
                                             SimpleNode jjtn004 = new SimpleNode(JJTAND);
                                             boolean jjtc004 = true;
                                             jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(AND);
        } finally {
                                             if (jjtc004) {
                                               jjtree.closeNodeScope(jjtn004, true);
                                             }
        }
      } else if (jj_2_36(6)) {
                                                          SimpleNode jjtn005 = new SimpleNode(JJTEXTRACT);
                                                          boolean jjtc005 = true;
                                                          jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(EXTRACT);
        } finally {
                                                          if (jjtc005) {
                                                            jjtree.closeNodeScope(jjtn005, true);
                                                          }
        }
      } else if (jj_2_37(6)) {
                                                                               SimpleNode jjtn006 = new SimpleNode(JJTOVERRIDE);
                                                                               boolean jjtc006 = true;
                                                                               jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(OVERRIDE);
        } finally {
                                                                               if (jjtc006) {
                                                                                 jjtree.closeNodeScope(jjtn006, true);
                                                                               }
        }
      } else if (jj_2_38(6)) {
                                                                                                     SimpleNode jjtn007 = new SimpleNode(JJTPROJECT);
                                                                                                     boolean jjtc007 = true;
                                                                                                     jjtree.openNodeScope(jjtn007);
        try {
          jj_consume_token(PROJECT);
        } finally {
                                                                                                     if (jjtc007) {
                                                                                                       jjtree.closeNodeScope(jjtn007, true);
                                                                                                     }
        }
      } else if (jj_2_39(6)) {
                                                                                                                          SimpleNode jjtn008 = new SimpleNode(JJTHIDE);
                                                                                                                          boolean jjtc008 = true;
                                                                                                                          jjtree.openNodeScope(jjtn008);
        try {
          jj_consume_token(HIDE);
        } finally {
                                                                                                                          if (jjtc008) {
                                                                                                                            jjtree.closeNodeScope(jjtn008, true);
                                                                                                                          }
        }
      } else if (jj_2_40(6)) {
       SimpleNode jjtn009 = new SimpleNode(JJTDIFFERENTIATE);
       boolean jjtc009 = true;
       jjtree.openNodeScope(jjtn009);
        try {
          jj_consume_token(DIFFERENTIATE);
        } finally {
       if (jjtc009) {
         jjtree.closeNodeScope(jjtn009, true);
       }
        }
      } else if (jj_2_41(6)) {
                                        SimpleNode jjtn010 = new SimpleNode(JJTSUBSTITUTE);
                                        boolean jjtc010 = true;
                                        jjtree.openNodeScope(jjtn010);
        try {
          jj_consume_token(SUBSTITUTE);
        } finally {
                                        if (jjtc010) {
                                          jjtree.closeNodeScope(jjtn010, true);
                                        }
        }
      } else if (jj_2_42(6)) {
                                                                   SimpleNode jjtn011 = new SimpleNode(JJTINTERSECT);
                                                                   boolean jjtc011 = true;
                                                                   jjtree.openNodeScope(jjtn011);
        try {
          jj_consume_token(INTERSECT);
        } finally {
                                                                   if (jjtc011) {
                                                                     jjtree.closeNodeScope(jjtn011, true);
                                                                   }
        }
      } else if (jj_2_43(6)) {
                                                                                            SimpleNode jjtn012 = new SimpleNode(JJTUNION);
                                                                                            boolean jjtc012 = true;
                                                                                            jjtree.openNodeScope(jjtn012);
        try {
          jj_consume_token(UNION);
        } finally {
                                                                                            if (jjtc012) {
                                                                                              jjtree.closeNodeScope(jjtn012, true);
                                                                                            }
        }
      } else if (jj_2_44(6)) {
                                                                                                             SimpleNode jjtn013 = new SimpleNode(JJTCHOOSE);
                                                                                                             boolean jjtc013 = true;
                                                                                                             jjtree.openNodeScope(jjtn013);
        try {
          jj_consume_token(CHOOSE);
        } finally {
                                                                                                             if (jjtc013) {
                                                                                                               jjtree.closeNodeScope(jjtn013, true);
                                                                                                             }
        }
      } else if (jj_2_45(6)) {
       SimpleNode jjtn014 = new SimpleNode(JJTISSUBCONTEXT);
       boolean jjtc014 = true;
       jjtree.openNodeScope(jjtn014);
        try {
          jj_consume_token(ISSUBCONTEXT);
        } finally {
       if (jjtc014) {
         jjtree.closeNodeScope(jjtn014, true);
       }
        }
      } else if (jj_2_46(6)) {
                                      SimpleNode jjtn015 = new SimpleNode(JJTISSUPCONTEXT);
                                      boolean jjtc015 = true;
                                      jjtree.openNodeScope(jjtn015);
        try {
          jj_consume_token(ISSUPCONTEXT);
        } finally {
                                      if (jjtc015) {
                                        jjtree.closeNodeScope(jjtn015, true);
                                      }
        }
      } else if (jj_2_47(6)) {
                                                                     SimpleNode jjtn016 = new SimpleNode(JJTRANGE);
                                                                     boolean jjtc016 = true;
                                                                     jjtree.openNodeScope(jjtn016);
        try {
          jj_consume_token(RANGE);
        } finally {
                                                                     if (jjtc016) {
                                                                       jjtree.closeNodeScope(jjtn016, true);
                                                                     }
        }
      } else if (jj_2_48(6)) {
                                                                                      SimpleNode jjtn017 = new SimpleNode(JJTDIRECTEDRANGE);
                                                                                      boolean jjtc017 = true;
                                                                                      jjtree.openNodeScope(jjtn017);
        try {
          jj_consume_token(DIRECTEDRANGE);
        } finally {
                                                                                      if (jjtc017) {
                                                                                        jjtree.closeNodeScope(jjtn017, true);
                                                                                      }
        }
      } else if (jj_2_49(6)) {
                                                                                                                       SimpleNode jjtn018 = new SimpleNode(JJTCOMPARESET);
                                                                                                                       boolean jjtc018 = true;
                                                                                                                       jjtree.openNodeScope(jjtn018);
        try {
          jj_consume_token(COMPARESET);
        } finally {
                                                                                                                       if (jjtc018) {
                                                                                                                         jjtree.closeNodeScope(jjtn018, true);
                                                                                                                       }
        }
      } else if (jj_2_50(6)) {
                                                                                                                                                  SimpleNode jjtn019 = new SimpleNode(JJTJOIN);
                                                                                                                                                  boolean jjtc019 = true;
                                                                                                                                                  jjtree.openNodeScope(jjtn019);
        try {
          jj_consume_token(JOIN);
        } finally {
                                                                                                                                                  if (jjtc019) {
                                                                                                                                                    jjtree.closeNodeScope(jjtn019, true);
                                                                                                                                                  }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
           SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // right
           SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // multOp
           SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left
           if(!(midNode1.toString().equals(midNode3.toString())))
           {
                   System.err.println("Semantic Error at line " + token.beginLine + ", column " + token.next.beginColumn+": Two operands must be of the same type.");
               countErrors();
           }
           SimpleNode node=biOp(midNode1, midNode2, midNode3);
           jjtree.pushNode(node);
      Term1();
    } else {
      ;
    }
  }

  final public void factor() throws ParseException {
    if (jj_2_52(6)) {
      ID();
    } else if (jj_2_53(6)) {
      INTEGER();
    } else if (jj_2_54(6)) {
      FLOAT();
    } else if (jj_2_55(6)) {
      STRING();
    } else if (jj_2_56(6)) {
      jj_consume_token(LPAREN);
      E();
      jj_consume_token(RPAREN);
    } else if (jj_2_57(6)) {
            SimpleNode jjtn001 = new SimpleNode(JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(NOT);
        jj_consume_token(LPAREN);
        E();
        jj_consume_token(RPAREN);
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
    } else if (jj_2_58(6)) {
      unary();
    } else if (jj_2_59(6)) {
      context_simple();
    } else if (jj_2_60(6)) {
      context_set();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void unary() throws ParseException {
    if (jj_2_62(6)) {
                SimpleNode jjtn001 = new SimpleNode(JJTUNIOP);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(FIRST);
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      E();
                SimpleNode midNode1 = (SimpleNode)jjtree.popNode();  // E
            SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); // uniOp
                SimpleNode node = uniOp(midNode1, midNode2);
                jjtree.pushNode(node);
    } else if (jj_2_63(6)) {
                SimpleNode jjtn002 = new SimpleNode(JJTNEXT);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(NEXT);
      } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
      }
      E();
                SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // E
                SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // next
                SimpleNode node=uniOp(midNode1, midNode2);
                jjtree.pushNode(node);
    } else if (jj_2_64(6)) {
                SimpleNode jjtn003 = new SimpleNode(JJTPREV);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(PREV);
      } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                }
      }
      E();
                SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // E
                SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); // prev
                SimpleNode node = uniOp(midNode1, midNode2);
                jjtree.pushNode(node);
    } else if (jj_2_65(6)) {
            SimpleNode jjtn004 = new SimpleNode(JJTISEOD);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(ISEOD);
        jj_consume_token(LBRACKET);
        E();
        label_4:
        while (true) {
          if (jj_2_61(6)) {
            ;
          } else {
            break label_4;
          }
          jj_consume_token(COMMA);
          E();
        }
        jj_consume_token(RBRACKET);
        jj_consume_token(LPAREN);
        E();
        jj_consume_token(RPAREN);
      } catch (Throwable jjte004) {
            if (jjtc004) {
              jjtree.clearNodeScope(jjtn004);
              jjtc004 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte004 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte004;}
            }
            if (jjte004 instanceof ParseException) {
              {if (true) throw (ParseException)jjte004;}
            }
            {if (true) throw (Error)jjte004;}
      } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
            }
      }
    } else if (jj_2_66(6)) {
            SimpleNode jjtn005 = new SimpleNode(JJTISEMPTY);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(ISEMPTY);
      } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005, true);
            }
      }
      E();
                SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // E
                SimpleNode midNode2 = (SimpleNode)jjtree.popNode();
                SimpleNode node = uniOp(midNode1, midNode2);
                jjtree.pushNode(node);
    } else if (jj_2_67(6)) {
            SimpleNode jjtn006 = new SimpleNode(JJTISSET);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(ISSET);
      } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
      }
      E();
                SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // E
                SimpleNode midNode2 = (SimpleNode)jjtree.popNode();
                SimpleNode node = uniOp(midNode1, midNode2);
                jjtree.pushNode(node);
    } else if (jj_2_68(6)) {
                SimpleNode jjtn007 = new SimpleNode(JJTISBOX);
                boolean jjtc007 = true;
                jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(ISBOX);
      } finally {
                if (jjtc007) {
                  jjtree.closeNodeScope(jjtn007, true);
                }
      }
      E();
                SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // E
                SimpleNode midNode2 = (SimpleNode)jjtree.popNode();
                SimpleNode node = uniOp(midNode1, midNode2);
                jjtree.pushNode(node);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void context_simple() throws ParseException {
          int count=0;
    jj_consume_token(LBRACKET);
                SimpleNode jjtn001 = new SimpleNode(JJTSIMPLECONTEXT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
    try {
      context_element(count);
          count++;
      label_5:
      while (true) {
        if (jj_2_69(6)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(COMMA);
        context_element(count);
      }
    } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
    } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
    }
    jj_consume_token(RBRACKET);
  }

  final public void context_set() throws ParseException {
    jj_consume_token(LCURB);
             SimpleNode jjtn001 = new SimpleNode(JJTCONTEXTSET);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
    try {
      context_simple();
      label_6:
      while (true) {
        if (jj_2_70(6)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
        context_simple();
      }
    } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
    } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
    }
    jj_consume_token(RCURB);
  }

//void context_box():{}//     //{//      <BOX>  <LPAREN> ID() ID_p() #DEF <COLON> #CONTEXT_BOX E() <RPAREN>//     {//     	SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // E//		SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); // context_box//		SimpleNode midNode3 = (SimpleNode)jjtree.popNode(); // DEF//		SimpleNode midNode4 = (SimpleNode)jjtree.popNode(); //1st id//		SimpleNode node = j_context_box(midNode1, midNode2, midNode3, midNode4);//		jjtree.pushNode(node);//     } //}
  final public void context_element(int pcount) throws ParseException {
    E();
           SimpleNode jjtn001 = new SimpleNode(JJTCONTEXT_ELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(COLON);
    } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
    }
    E();
        SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); //E()
                SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); //#CONTEXT_ELEMENT
                SimpleNode midNode3 = (SimpleNode)jjtree.popNode(); //E()
                midNode3.jjtSetParent(midNode2);
                midNode1.jjtSetParent(midNode2);
                midNode2.jjtAddChild(midNode3, 0);
                midNode2.jjtAddChild(midNode1, 1);
                if(pcount!=0 && ((SimpleNode)jjtree.peekNode()).jjtGetChild(0).toString().equals(((SimpleNode)midNode2).jjtGetChild(0).toString()))
        {
            System.err.println("Semantic error at line:"+ token.beginLine + ", column " + token.next.beginColumn+" Duplicate dimension ID: This is not a simple context!");
            this.countErrors();
        }
                jjtree.pushNode(midNode2);
  }

  final public void Q() throws ParseException {
    try {
      if (jj_2_74(6)) {
                   SimpleNode jjtn001 = new SimpleNode(JJTDIMENSION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(DIMENSION);
          ID();
          if (jj_2_71(6)) {
            jj_consume_token(COLON);
            tagset();
          } else {
            ;
          }
          jj_consume_token(SEMICOLON);
        } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
        } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
        }
        label_7:
        while (true) {
          if (jj_2_72(6)) {
            ;
          } else {
            break label_7;
          }
          Q();
        }
      } else if (jj_2_75(6)) {
        E();
        jj_consume_token(SEMICOLON);
        label_8:
        while (true) {
          if (jj_2_73(6)) {
            ;
          } else {
            break label_8;
          }
          Q();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                countErrors();
                System.err.println(e.toString());
                Token t;
                do
                {
                        t = getNextToken();
                }
                while(t.kind != SEMICOLON);
    }
  }

  final public void QTail() throws ParseException {
    try {
      if (jj_2_78(6)) {
        jj_consume_token(LBRACKET);
                              SimpleNode jjtn001 = new SimpleNode(JJTDIM);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          ID();
          label_9:
          while (true) {
            if (jj_2_76(6)) {
              ;
            } else {
              break label_9;
            }
            jj_consume_token(COMMA);
            ID();
          }
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
        }
        jj_consume_token(RBRACKET);
        jj_consume_token(LPAREN);
                                                                                  SimpleNode jjtn002 = new SimpleNode(JJTPARAS);
                                                                                  boolean jjtc002 = true;
                                                                                  jjtree.openNodeScope(jjtn002);
        try {
          ID();
          label_10:
          while (true) {
            if (jj_2_77(6)) {
              ;
            } else {
              break label_10;
            }
            jj_consume_token(COMMA);
            ID();
          }
        } catch (Throwable jjte002) {
                                                                                  if (jjtc002) {
                                                                                    jjtree.clearNodeScope(jjtn002);
                                                                                    jjtc002 = false;
                                                                                  } else {
                                                                                    jjtree.popNode();
                                                                                  }
                                                                                  if (jjte002 instanceof RuntimeException) {
                                                                                    {if (true) throw (RuntimeException)jjte002;}
                                                                                  }
                                                                                  if (jjte002 instanceof ParseException) {
                                                                                    {if (true) throw (ParseException)jjte002;}
                                                                                  }
                                                                                  {if (true) throw (Error)jjte002;}
        } finally {
                                                                                  if (jjtc002) {
                                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                                  }
        }
                                                                                                                    SimpleNode jjtn003 = new SimpleNode(JJTFUN);
                                                                                                                    boolean jjtc003 = true;
                                                                                                                    jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(RPAREN);
        } finally {
                                                                                                                    if (jjtc003) {
                                                                                                                      jjtree.closeNodeScope(jjtn003, true);
                                                                                                                    }
        }
                        SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // #FUN
                        SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); // #paras
                        SimpleNode midNode3 = (SimpleNode)jjtree.popNode(); // #dim
                        SimpleNode midNode4 = (SimpleNode)jjtree.popNode();// #function name
                        midNode4.jjtSetParent(midNode1);
                        midNode3.jjtSetParent(midNode1);
                        midNode2.jjtSetParent(midNode1);
                        midNode1.jjtAddChild(midNode4, 0);
                        midNode1.jjtAddChild(midNode3, 1);
                        midNode1.jjtAddChild(midNode2, 2);
                        jjtree.pushNode(midNode1);
      } else {
        ;
      }
    } catch (ParseException e) {
                countErrors();
                System.err.println(e.toString());

                Token t;
                do
                {
                        t = getNextToken();
                }
                while(t.kind != SEMICOLON);
    }
  }

  final public void tagset() throws ParseException {
    if (jj_2_79(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(FINITE);
      jj_consume_token(PERIODIC);
      jj_consume_token(LCURB);
      orderdedFinitePeriodicTagSet();
      jj_consume_token(RCURB);
    } else if (jj_2_80(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(FINITE);
      jj_consume_token(NONPERIODIC);
      jj_consume_token(ENUMERATED);
      jj_consume_token(LCURB);
      orderdedFiniteNonperiodicTagSet_enumerated();
      jj_consume_token(RCURB);
    } else if (jj_2_81(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(FINITE);
      jj_consume_token(NONPERIODIC);
      jj_consume_token(LOWER);
      jj_consume_token(UPPER);
      jj_consume_token(LCURB);
      orderdedFiniteNonperiodicTagSet_lowerupper();
      jj_consume_token(RCURB);
    } else if (jj_2_82(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(FINITE);
      jj_consume_token(NONPERIODIC);
      jj_consume_token(LOWER);
      jj_consume_token(UPPER);
      jj_consume_token(STEP);
      jj_consume_token(LCURB);
      orderdedFiniteNonperiodicTagSet_lowerupperstep();
      jj_consume_token(RCURB);
    } else if (jj_2_83(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(INFINITE);
      jj_consume_token(PERIODIC);
      jj_consume_token(LCURB);
      orderedInfinitePeriodicTagSet();
      jj_consume_token(RCURB);
    } else if (jj_2_84(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(INFINITE);
      jj_consume_token(NONPERIODIC);
      jj_consume_token(LOWER);
      jj_consume_token(LCURB);
      orderedInfiniteNonperiodicTagSet_lower();
      jj_consume_token(RCURB);
    } else if (jj_2_85(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(INFINITE);
      jj_consume_token(NONPERIODIC);
      jj_consume_token(LOWER);
      jj_consume_token(STEP);
      jj_consume_token(LCURB);
      orderedInfiniteNonperiodicTagSet_lowerstep();
      jj_consume_token(RCURB);
    } else if (jj_2_86(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(INFINITE);
      jj_consume_token(NONPERIODIC);
      jj_consume_token(UPPER);
      jj_consume_token(LCURB);
      orderedInfiniteNonperiodicTagSet_upper();
      jj_consume_token(RCURB);
    } else if (jj_2_87(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(INFINITE);
      jj_consume_token(NONPERIODIC);
      jj_consume_token(UPPER);
      jj_consume_token(STEP);
      jj_consume_token(LCURB);
      orderedInfiniteNonperiodicTagSet_upperstep();
      jj_consume_token(RCURB);
    } else if (jj_2_88(6)) {
      jj_consume_token(ORDERED);
      jj_consume_token(INFINITE);
      jj_consume_token(NONPERIODIC);
      jj_consume_token(LCURB);
      jj_consume_token(MINUSINF);
      jj_consume_token(TO);
      jj_consume_token(PLUSINF);
                                                                            SimpleNode jjtn001 = new SimpleNode(JJTORDEREDINFINITENONPERIODICTAGSET_INFINITE);
                                                                            boolean jjtc001 = true;
                                                                            jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RCURB);
      } finally {
                                                                            if (jjtc001) {
                                                                              jjtree.closeNodeScope(jjtn001, true);
                                                                            }
      }
    } else if (jj_2_89(6)) {
      jj_consume_token(UNORDERED);
      jj_consume_token(FINITE);
      jj_consume_token(PERIODIC);
      jj_consume_token(LCURB);
      unorderedFinitePeriodicTagSet();
      jj_consume_token(RCURB);
    } else if (jj_2_90(6)) {
      jj_consume_token(UNORDERED);
      jj_consume_token(FINITE);
      jj_consume_token(NONPERIODIC);
      jj_consume_token(LCURB);
      unorderedFiniteNonperiodicTagSet();
      jj_consume_token(RCURB);
    } else if (jj_2_91(6)) {
      jj_consume_token(UNORDERED);
      jj_consume_token(INFINITE);
      jj_consume_token(PERIODIC);
      jj_consume_token(LCURB);
      unorderedInfinitePeriodicTagSet();
      jj_consume_token(RCURB);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// ORDEREDFINITEPERIODICTAGSET
//     /               \
//   PERIOD          TIMES
  final public void orderdedFinitePeriodicTagSet() throws ParseException {
          SimpleNode jjtn003 = new SimpleNode(JJTORDEREDFINITEPERIODICTAGSET);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
    try {
      jj_consume_token(LT);
              SimpleNode jjtn001 = new SimpleNode(JJTPERIOD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        E();
        label_11:
        while (true) {
          if (jj_2_92(6)) {
            ;
          } else {
            break label_11;
          }
          jj_consume_token(COMMA);
          E();
        }
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      jj_consume_token(GT);
      jj_consume_token(COLON);
                                                     SimpleNode jjtn002 = new SimpleNode(JJTTIMES);
                                                     boolean jjtc002 = true;
                                                     jjtree.openNodeScope(jjtn002);
      try {
        INTEGER();
      } catch (Throwable jjte002) {
                                                     if (jjtc002) {
                                                       jjtree.clearNodeScope(jjtn002);
                                                       jjtc002 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte002 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte002;}
                                                     }
                                                     if (jjte002 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte002;}
                                                     }
                                                     {if (true) throw (Error)jjte002;}
      } finally {
                                                     if (jjtc002) {
                                                       jjtree.closeNodeScope(jjtn002, true);
                                                     }
      }
    } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
    } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
    }
  }

  final public void orderdedFiniteNonperiodicTagSet_enumerated() throws ParseException {
           SimpleNode jjtn001 = new SimpleNode(JJTORDEREDFINITENONPERIODICTAGSET_ENUMERATED);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
    try {
      E();
      label_12:
      while (true) {
        if (jj_2_93(6)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(COMMA);
        E();
      }
    } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
    } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
    }
  }

  final public void orderdedFiniteNonperiodicTagSet_lowerupper() throws ParseException {
          SimpleNode jjtn003 = new SimpleNode(JJTORDEREDFINITENONPERIODICTAGSET_LOWERUPPER);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
    try {
           SimpleNode jjtn001 = new SimpleNode(JJTLOWER);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        INTEGER();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
      }
      jj_consume_token(TO);
                                SimpleNode jjtn002 = new SimpleNode(JJTUPPER);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
      try {
        INTEGER();
      } catch (Throwable jjte002) {
                                if (jjtc002) {
                                  jjtree.clearNodeScope(jjtn002);
                                  jjtc002 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte002 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte002;}
                                }
                                if (jjte002 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte002;}
                                }
                                {if (true) throw (Error)jjte002;}
      } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002, true);
                                }
      }
    } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
    } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
    }
  }

  final public void orderdedFiniteNonperiodicTagSet_lowerupperstep() throws ParseException {
          SimpleNode jjtn004 = new SimpleNode(JJTORDEREDFINITENONPERIODICTAGSET_LOWERUPPERSTEP);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
    try {
           SimpleNode jjtn001 = new SimpleNode(JJTLOWER);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        INTEGER();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
      }
      jj_consume_token(TO);
                                SimpleNode jjtn002 = new SimpleNode(JJTUPPER);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
      try {
        INTEGER();
      } catch (Throwable jjte002) {
                                if (jjtc002) {
                                  jjtree.clearNodeScope(jjtn002);
                                  jjtc002 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte002 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte002;}
                                }
                                if (jjte002 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte002;}
                                }
                                {if (true) throw (Error)jjte002;}
      } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002, true);
                                }
      }
      jj_consume_token(STEP);
                                                       SimpleNode jjtn003 = new SimpleNode(JJTSTEP);
                                                       boolean jjtc003 = true;
                                                       jjtree.openNodeScope(jjtn003);
      try {
        INTEGER();
      } catch (Throwable jjte003) {
                                                       if (jjtc003) {
                                                         jjtree.clearNodeScope(jjtn003);
                                                         jjtc003 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte003 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte003;}
                                                       }
                                                       if (jjte003 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte003;}
                                                       }
                                                       {if (true) throw (Error)jjte003;}
      } finally {
                                                       if (jjtc003) {
                                                         jjtree.closeNodeScope(jjtn003, true);
                                                       }
      }
    } catch (Throwable jjte004) {
          if (jjtc004) {
            jjtree.clearNodeScope(jjtn004);
            jjtc004 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte004 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte004;}
          }
          if (jjte004 instanceof ParseException) {
            {if (true) throw (ParseException)jjte004;}
          }
          {if (true) throw (Error)jjte004;}
    } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
    }
  }

  final public void orderedInfinitePeriodicTagSet() throws ParseException {
          SimpleNode jjtn002 = new SimpleNode(JJTORDEREDINFINITEPERIODICTAGSET);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
    try {
      jj_consume_token(LT);
              SimpleNode jjtn001 = new SimpleNode(JJTPERIOD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        E();
        label_13:
        while (true) {
          if (jj_2_94(6)) {
            ;
          } else {
            break label_13;
          }
          jj_consume_token(COMMA);
          E();
        }
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      jj_consume_token(GT);
    } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
    }
  }

  final public void orderedInfiniteNonperiodicTagSet_lower() throws ParseException {
          SimpleNode jjtn002 = new SimpleNode(JJTORDEREDINFINITENONPERIODICTAGSET_LOWER);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
    try {
           SimpleNode jjtn001 = new SimpleNode(JJTLOWER);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        INTEGER();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
      }
      jj_consume_token(TO);
      jj_consume_token(PLUSINF);
    } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
    }
  }

  final public void orderedInfiniteNonperiodicTagSet_lowerstep() throws ParseException {
          SimpleNode jjtn003 = new SimpleNode(JJTORDEREDINFINITENONPERIODICTAGSET_LOWERSTEP);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
    try {
           SimpleNode jjtn001 = new SimpleNode(JJTLOWER);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        INTEGER();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
      }
      jj_consume_token(TO);
      jj_consume_token(PLUSINF);
      jj_consume_token(STEP);
                                                  SimpleNode jjtn002 = new SimpleNode(JJTSTEP);
                                                  boolean jjtc002 = true;
                                                  jjtree.openNodeScope(jjtn002);
      try {
        INTEGER();
      } catch (Throwable jjte002) {
                                                  if (jjtc002) {
                                                    jjtree.clearNodeScope(jjtn002);
                                                    jjtc002 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte002 instanceof RuntimeException) {
                                                    {if (true) throw (RuntimeException)jjte002;}
                                                  }
                                                  if (jjte002 instanceof ParseException) {
                                                    {if (true) throw (ParseException)jjte002;}
                                                  }
                                                  {if (true) throw (Error)jjte002;}
      } finally {
                                                  if (jjtc002) {
                                                    jjtree.closeNodeScope(jjtn002, true);
                                                  }
      }
    } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
    } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
    }
  }

  final public void orderedInfiniteNonperiodicTagSet_upper() throws ParseException {
          SimpleNode jjtn002 = new SimpleNode(JJTORDEREDINFINITENONPERIODICTAGSET_UPPER);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
    try {
      jj_consume_token(MINUSINF);
      jj_consume_token(TO);
                          SimpleNode jjtn001 = new SimpleNode(JJTUPPER);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
        INTEGER();
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
      }
    } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
    }
  }

  final public void orderedInfiniteNonperiodicTagSet_upperstep() throws ParseException {
          SimpleNode jjtn003 = new SimpleNode(JJTORDEREDINFINITENONPERIODICTAGSET_UPPERSTEP);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
    try {
      jj_consume_token(MINUSINF);
      jj_consume_token(TO);
                          SimpleNode jjtn001 = new SimpleNode(JJTUPPER);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
        INTEGER();
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
      }
      jj_consume_token(STEP);
                                                   SimpleNode jjtn002 = new SimpleNode(JJTSTEP);
                                                   boolean jjtc002 = true;
                                                   jjtree.openNodeScope(jjtn002);
      try {
        INTEGER();
      } catch (Throwable jjte002) {
                                                   if (jjtc002) {
                                                     jjtree.clearNodeScope(jjtn002);
                                                     jjtc002 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte002 instanceof RuntimeException) {
                                                     {if (true) throw (RuntimeException)jjte002;}
                                                   }
                                                   if (jjte002 instanceof ParseException) {
                                                     {if (true) throw (ParseException)jjte002;}
                                                   }
                                                   {if (true) throw (Error)jjte002;}
      } finally {
                                                   if (jjtc002) {
                                                     jjtree.closeNodeScope(jjtn002, true);
                                                   }
      }
    } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
    } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
    }
  }

  final public void unorderedFinitePeriodicTagSet() throws ParseException {
          SimpleNode jjtn003 = new SimpleNode(JJTUNORDEREDFINITEPERIODICTAGSET);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
    try {
      jj_consume_token(LT);
              SimpleNode jjtn001 = new SimpleNode(JJTPERIOD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        E();
        label_14:
        while (true) {
          if (jj_2_95(6)) {
            ;
          } else {
            break label_14;
          }
          jj_consume_token(COMMA);
          E();
        }
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      jj_consume_token(GT);
      jj_consume_token(COLON);
                                                     SimpleNode jjtn002 = new SimpleNode(JJTTIMES);
                                                     boolean jjtc002 = true;
                                                     jjtree.openNodeScope(jjtn002);
      try {
        INTEGER();
      } catch (Throwable jjte002) {
                                                     if (jjtc002) {
                                                       jjtree.clearNodeScope(jjtn002);
                                                       jjtc002 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte002 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte002;}
                                                     }
                                                     if (jjte002 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte002;}
                                                     }
                                                     {if (true) throw (Error)jjte002;}
      } finally {
                                                     if (jjtc002) {
                                                       jjtree.closeNodeScope(jjtn002, true);
                                                     }
      }
    } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
    } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
    }
  }

  final public void unorderedFiniteNonperiodicTagSet() throws ParseException {
          SimpleNode jjtn001 = new SimpleNode(JJTUNORDEREDFINITENONPERIODICTAGSET);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      E();
      label_15:
      while (true) {
        if (jj_2_96(6)) {
          ;
        } else {
          break label_15;
        }
        jj_consume_token(COMMA);
        E();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
  }

  final public void unorderedInfinitePeriodicTagSet() throws ParseException {
          SimpleNode jjtn002 = new SimpleNode(JJTUNORDEREDINFINITEPERIODICTAGSET);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
    try {
      jj_consume_token(LT);
              SimpleNode jjtn001 = new SimpleNode(JJTPERIOD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        E();
        label_16:
        while (true) {
          if (jj_2_97(6)) {
            ;
          } else {
            break label_16;
          }
          jj_consume_token(COMMA);
          E();
        }
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      jj_consume_token(GT);
    } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
    }
  }

// Note: Because of the scope issue, we have to put #ID at this position so that jjtThis can work properly
  final public void ID() throws ParseException {
 /*@bgen(jjtree) ID */
        SimpleNode jjtn000 = new SimpleNode(JJTID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      oToken = jj_consume_token(ID);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setImage(oToken.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void INTEGER() throws ParseException {
 /*@bgen(jjtree) INTEGER */
        SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      oToken = jj_consume_token(INTEGER_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setType(0);
                jjtn000.setImage(oToken.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FLOAT() throws ParseException {
 /*@bgen(jjtree) FLOAT */
        SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      oToken = jj_consume_token(FLOATING_POINT_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setType(1);
                jjtn000.setImage(oToken.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void STRING() throws ParseException {
 /*@bgen(jjtree) STRING */
        SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      oToken = jj_consume_token(STRING_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setType(2);
                jjtn000.setImage(oToken.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  final private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  final private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  final private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  final private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  final private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  final private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  final private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  final private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  final private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  final private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  final private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  final private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  final private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  final private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  final private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  final private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  final private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  final private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(RANGE)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(INTERSECT)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_scan_token(PREV)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  final private boolean jj_3_63() {
    if (jj_scan_token(NEXT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(EXTRACT)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3_91() {
    if (jj_scan_token(UNORDERED)) return true;
    if (jj_scan_token(INFINITE)) return true;
    if (jj_scan_token(PERIODIC)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_90() {
    if (jj_scan_token(UNORDERED)) return true;
    if (jj_scan_token(FINITE)) return true;
    if (jj_scan_token(NONPERIODIC)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_89() {
    if (jj_scan_token(UNORDERED)) return true;
    if (jj_scan_token(FINITE)) return true;
    if (jj_scan_token(PERIODIC)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_88() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(INFINITE)) return true;
    if (jj_scan_token(NONPERIODIC)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_scan_token(MINUSINF)) return true;
    if (jj_scan_token(TO)) return true;
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_scan_token(FIRST)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_87() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(INFINITE)) return true;
    if (jj_scan_token(NONPERIODIC)) return true;
    if (jj_scan_token(UPPER)) return true;
    if (jj_scan_token(STEP)) return true;
    if (jj_scan_token(LCURB)) return true;
    return false;
  }

  final private boolean jj_3_86() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(INFINITE)) return true;
    if (jj_scan_token(NONPERIODIC)) return true;
    if (jj_scan_token(UPPER)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_72() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_85() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(INFINITE)) return true;
    if (jj_scan_token(NONPERIODIC)) return true;
    if (jj_scan_token(LOWER)) return true;
    if (jj_scan_token(STEP)) return true;
    if (jj_scan_token(LCURB)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3_84() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(INFINITE)) return true;
    if (jj_scan_token(NONPERIODIC)) return true;
    if (jj_scan_token(LOWER)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_82() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(FINITE)) return true;
    if (jj_scan_token(NONPERIODIC)) return true;
    if (jj_scan_token(LOWER)) return true;
    if (jj_scan_token(UPPER)) return true;
    if (jj_scan_token(STEP)) return true;
    return false;
  }

  final private boolean jj_3_81() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(FINITE)) return true;
    if (jj_scan_token(NONPERIODIC)) return true;
    if (jj_scan_token(LOWER)) return true;
    if (jj_scan_token(UPPER)) return true;
    if (jj_scan_token(LCURB)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3_83() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(INFINITE)) return true;
    if (jj_scan_token(PERIODIC)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_80() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(FINITE)) return true;
    if (jj_scan_token(NONPERIODIC)) return true;
    if (jj_scan_token(ENUMERATED)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_79() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_scan_token(FINITE)) return true;
    if (jj_scan_token(PERIODIC)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(SUBSTITUTE)) return true;
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(ISSUPCONTEXT)) return true;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_76() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    if (jj_3R_20()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    if (jj_3R_20()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_78() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_76()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_17()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_77()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3_71() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(ISSUBCONTEXT)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(DIFFERENTIATE)) return true;
    return false;
  }

  final private boolean jj_3_73() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_20()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_40()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_18()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_75() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_74() {
    if (jj_scan_token(DIMENSION)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) return true;
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_70() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(JOIN)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_97() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(UPON)) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_96() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_95() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(HIDE)) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(COMPARESET)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_69() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(ASA)) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(CHOOSE)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_69()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(WVR)) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(MINUSINF)) return true;
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(PROJECT)) return true;
    return false;
  }

  final private boolean jj_3_68() {
    if (jj_scan_token(ISBOX)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3_94() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(FBY)) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3_67() {
    if (jj_scan_token(ISSET)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(DIRECTEDRANGE)) return true;
    return false;
  }

  final private boolean jj_3_77() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_66() {
    if (jj_scan_token(ISEMPTY)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_93() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_22()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(OVERRIDE)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_scan_token(ISEOD)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_61()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_92() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_18()) return true;
    return false;
  }

  public LucxParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[97];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public LucxParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public LucxParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LucxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public LucxParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LucxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public LucxParser(LucxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(LucxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[103];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 103; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 97; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
