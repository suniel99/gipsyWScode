/* ForensicLucidParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ForensicLucidParserTokenManager.java */
package gipsy.GIPC.intensional.SIPL.ForensicLucid;
import gipsy.GIPC.intensional.SimpleNode;
import gipsy.GIPC.util.Node;
import gipsy.GIPC.util.ParseException;
import gipsy.GIPC.util.SimpleCharStream;
import gipsy.GIPC.util.Token;
import gipsy.GIPC.util.TokenMgrError;
import gipsy.interfaces.AbstractSyntaxTree;
import marf.util.Debug;
import java.util.*;
import gipsy.storage.Dictionary;

/** Token Manager. */
@SuppressWarnings("unused")public class ForensicLucidParserTokenManager implements ForensicLucidParserConstants {
        int iCount = 0;

        void commonTokenAction(Token poToken)
        {
                System.out.println(poToken.image);
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active2 & 0x10L) != 0L)
            return 22;
         if ((active0 & 0x800000000L) != 0L)
            return 46;
         if ((active0 & 0x100000000000000L) != 0L)
            return 68;
         if ((active0 & 0x8c0701e7fffffc00L) != 0L || (active1 & 0x180ff0001ffffL) != 0L)
         {
            jjmatchedKind = 121;
            return 46;
         }
         if ((active1 & 0x400000000000L) != 0L)
            return 16;
         return -1;
      case 1:
         if ((active0 & 0x1000000a89000L) != 0L || (active1 & 0x100010000L) != 0L)
            return 46;
         if ((active0 & 0x8c0601e7ff576c00L) != 0L || (active1 & 0x180fe0000ffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 1;
            }
            return 46;
         }
         return -1;
      case 2:
         if ((active0 & 0x8c06018000040800L) != 0L || (active1 & 0x80000000801dL) != 0L)
            return 46;
         if ((active0 & 0x67fff36400L) != 0L || (active1 & 0x100ff00007fe2L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 2;
            }
            return 46;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000106000L) != 0L || (active1 & 0x4600001b02L) != 0L)
            return 46;
         if ((active0 & 0x473fe30400L) != 0L || (active1 & 0x100b9000064e0L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 3;
            return 46;
         }
         return -1;
      case 4:
         if ((active0 & 0x4030030000L) != 0L || (active1 & 0x1001900000460L) != 0L)
            return 46;
         if ((active0 & 0x70fe00400L) != 0L || (active1 & 0xa000006080L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 4;
            return 46;
         }
         return -1;
      case 5:
         if ((active0 & 0x800000L) != 0L || (active1 & 0x2000000080L) != 0L)
            return 46;
         if ((active0 & 0x70f600400L) != 0L || (active1 & 0x8000006000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 5;
            return 46;
         }
         return -1;
      case 6:
         if ((active0 & 0x200000L) != 0L || (active1 & 0x8000006000L) != 0L)
            return 46;
         if ((active0 & 0x70f400400L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 6;
            return 46;
         }
         return -1;
      case 7:
         if ((active0 & 0x3000000L) != 0L)
            return 46;
         if ((active0 & 0x70c400400L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 7;
            return 46;
         }
         return -1;
      case 8:
         if ((active0 & 0x400400L) != 0L)
            return 46;
         if ((active0 & 0x70c000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 8;
            return 46;
         }
         return -1;
      case 9:
         if ((active0 & 0x8000000L) != 0L)
            return 46;
         if ((active0 & 0x704000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 9;
            return 46;
         }
         return -1;
      case 10:
         if ((active0 & 0x304000000L) != 0L)
            return 46;
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 35:
         return jjStartNfaWithStates_0(0, 110, 16);
      case 36:
         return jjStartNfaWithStates_0(0, 35, 46);
      case 37:
         return jjStopAtPos(0, 57);
      case 38:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 124);
      case 41:
         return jjStopAtPos(0, 125);
      case 42:
         return jjStopAtPos(0, 55);
      case 43:
         return jjStopAtPos(0, 53);
      case 44:
         return jjStopAtPos(0, 131);
      case 45:
         return jjStopAtPos(0, 54);
      case 46:
         return jjStartNfaWithStates_0(0, 132, 22);
      case 47:
         return jjStartNfaWithStates_0(0, 56, 68);
      case 58:
         return jjStopAtPos(0, 133);
      case 59:
         return jjStopAtPos(0, 130);
      case 60:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 61:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x4000100000000000L, 0x0L);
      case 62:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 109);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xc0000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 126);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x1f00fffe0000L);
      case 93:
         return jjStopAtPos(0, 127);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8002000000000000L, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x800000008000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10408024800L, 0x1000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000808000L, 0x100000001L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1041000L, 0x1800000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x804000004000000L, 0x200001ec0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1000300200000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x8400014010L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x120L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000082000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10400000L, 0x2L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x4L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 128);
      case 124:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 129);
      default :
         return jjMoveNfa_0(17, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 48:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 62:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x4000001800L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0x11L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40040000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000002000000L, active1, 0x2200808000L);
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 46);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x30000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000L, active1, 0x4000000L);
      case 105:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800400L, active1, 0x1c01806a0000L);
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 80, 46);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000009440800L, active1, 0L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 46);
         return jjMoveStringLiteralDfa2_0(active0, 0x404018024000000L, active1, 0x800001002000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x2000002L);
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000200000L, active1, 0x8400004480L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x1808000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20100060L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x4L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300L);
      case 124:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000L, active1, 0L);
      case 97:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 46);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 46);
         break;
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x1000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 46);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 46);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 46);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x112000L, active1, 0x38c00000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 103:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 46);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x44040000L);
      case 108:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x1000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x2000L);
      case 110:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4800000L, active1, 0x20180000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x4002L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x1000000000060L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 46);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0x102000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x300004000L, active1, 0x1c4000620800L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 46);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 46);
         break;
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2008000000L, active1, 0x8000080L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000300L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0x400L);
      case 120:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200800000L);
      case 121:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 46);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 43:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 30);
         break;
      case 45:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 31);
         break;
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000020000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 97:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 46);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 46);
         break;
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8002000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x24004000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 46);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x330220400L, active1, 0x1000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x3800000L, active1, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 46);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 46);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3812000060L);
      case 112:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x80L);
      case 114:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 46);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x410000L, active1, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x100000000L);
      case 116:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 46);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1030000880000L);
      case 118:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000400000L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 46);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 46);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x10000000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 46);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x40c000000L, active1, 0x100040080000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x24202000L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L);
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 46);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000400L, active1, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x80010100080L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 46);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 46);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x300200000L, active1, 0x1800000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L);
      case 116:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x24000L);
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000800000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40004000L);
      case 100:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x600000L, active1, 0x2040000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L);
      case 110:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 46);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(5, 84);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x4002000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000L, active1, 0x21080000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0x8010000000L);
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 108);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000L, active1, 0L);
      case 120:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 107);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x308000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2800000L);
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 46);
         break;
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 46);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 92);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20200000L);
      case 103:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 90);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 105);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000400L, active1, 0x9000000L);
      case 109:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 104);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L);
      case 116:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 46);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0x401000000L, active1, 0x40040000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 46);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 46);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0x400c0000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x600000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000400L, active1, 0x20000L);
      case 116:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(7, 87);
         return jjMoveStringLiteralDfa8_0(active0, 0x308000000L, active1, 0xa000000L);
      case 121:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(7, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L);
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 46);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0x40000000L);
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(8, 88);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x300000000L, active1, 0x2000000L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 46);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x60000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L);
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 46);
         break;
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L, active1, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000000L, active1, 0x2400000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80a0000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 26, 46);
         break;
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(10, 82);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8080000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(10, 89);
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L, active1, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40200000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8080000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000L);
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000L);
      case 110:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(12, 83);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(12, 91);
         break;
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L, active1, 0L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(12, 81);
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L, active1, 0L);
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(13, 94);
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20200000L);
      case 120:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200000L);
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000000L);
      case 113:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L, active1, 0L);
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(14, 86);
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(15, 93);
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(19, 33);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(19, 34);
         break;
      case 120:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(20, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 86;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 68:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(81, 82); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 9); }
                  else if (curChar == 47)
                     { jjAddStates(10, 12); }
                  else if (curChar == 37)
                  {
                     if (kind > 134)
                        kind = 134;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 121)
                        kind = 121;
                     { jjCheckNAdd(46); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(13, 15); }
                  else if (curChar == 39)
                     { jjAddStates(16, 17); }
                  else if (curChar == 46)
                     { jjCheckNAdd(22); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 16;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     { jjCheckNAddTwoStates(19, 20); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 113)
                        kind = 113;
                     { jjCheckNAddStates(18, 20); }
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(21, 23); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 3:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 18:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 21:
                  if (curChar == 46)
                     { jjCheckNAdd(22); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAddStates(24, 26); }
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(25); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 27:
                  if (curChar == 39)
                     { jjAddStates(16, 17); }
                  break;
               case 28:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(29); }
                  break;
               case 29:
                  if (curChar == 39 && kind > 119)
                     kind = 119;
                  break;
               case 31:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(29); }
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 29); }
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(29); }
                  break;
               case 34:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 36:
                  if (curChar == 34)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 37:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 39:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 40:
                  if (curChar == 34 && kind > 120)
                     kind = 120;
                  break;
               case 41:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(27, 30); }
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 43:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 45:
                  if (curChar != 36)
                     break;
                  if (kind > 121)
                     kind = 121;
                  { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  { jjCheckNAdd(46); }
                  break;
               case 47:
                  if (curChar == 37 && kind > 134)
                     kind = 134;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 9); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 50:
                  if (curChar != 46)
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAddTwoStates(54, 26); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(58); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAddTwoStates(58, 26); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 61:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(62, 26); }
                  break;
               case 63:
                  if (curChar != 48)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(65, 20); }
                  break;
               case 66:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(66, 20); }
                  break;
               case 67:
                  if (curChar == 47)
                     { jjAddStates(10, 12); }
                  break;
               case 69:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 70:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 71:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 72:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 74:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 75:
                  if (curChar == 42)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 76:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(77, 75); }
                  break;
               case 77:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(77, 75); }
                  break;
               case 78:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 79:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 80:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(81, 82); }
                  break;
               case 81:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(81, 82); }
                  break;
               case 82:
                  if (curChar == 42)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 83:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(84, 82); }
                  break;
               case 84:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(84, 82); }
                  break;
               case 85:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     { jjCheckNAdd(46); }
                  }
                  else if ((0x4000000140000000L & l) != 0L)
                  {
                     if (kind > 134)
                        kind = 134;
                  }
                  break;
               case 0:
                  if (curChar == 68)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 1:
                  { jjCheckNAddStates(21, 23); }
                  break;
               case 5:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 20:
                  if ((0x100000001000L & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(43, 44); }
                  break;
               case 26:
                  if ((0x5000000050L & l) != 0L && kind > 117)
                     kind = 117;
                  break;
               case 28:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(29); }
                  break;
               case 30:
                  if (curChar == 92)
                     { jjAddStates(45, 47); }
                  break;
               case 31:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(29); }
                  break;
               case 37:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 38:
                  if (curChar == 92)
                     { jjAddStates(48, 50); }
                  break;
               case 39:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 45:
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  { jjCheckNAdd(46); }
                  break;
               case 47:
                  if ((0x4000000140000000L & l) != 0L && kind > 134)
                     kind = 134;
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(51, 52); }
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(53, 54); }
                  break;
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(55, 56); }
                  break;
               case 64:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(65); }
                  break;
               case 65:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(65, 20); }
                  break;
               case 69:
                  { jjAddStates(0, 2); }
                  break;
               case 74:
                  { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 76:
               case 77:
                  { jjCheckNAddTwoStates(77, 75); }
                  break;
               case 81:
                  { jjCheckNAddTwoStates(81, 82); }
                  break;
               case 83:
               case 84:
                  { jjCheckNAddTwoStates(84, 82); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 46:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 121)
                     kind = 121;
                  { jjCheckNAdd(46); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(21, 23); }
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(13, 15); }
                  break;
               case 69:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               case 74:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 76:
               case 77:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(77, 75); }
                  break;
               case 81:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(81, 82); }
                  break;
               case 83:
               case 84:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(84, 82); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 86 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   69, 70, 72, 49, 50, 55, 56, 59, 60, 26, 68, 79, 80, 37, 38, 40, 
   28, 30, 64, 66, 20, 1, 2, 4, 22, 23, 26, 37, 38, 42, 40, 51, 
   52, 26, 59, 60, 26, 75, 76, 78, 82, 83, 85, 24, 25, 31, 32, 34, 
   39, 41, 43, 53, 54, 57, 58, 61, 62, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, 
"\144\151\155\145\156\163\151\157\156", "\145\156\144", "\151\146", "\164\150\145\156", "\145\154\163\145", 
"\146\151", "\167\150\145\162\145", "\145\155\142\145\144", "\151\156\164", "\164\157", 
"\163\164\145\160", "\157\162\144\145\162\145\144", "\165\156\157\162\144\145\162\145\144", 
"\146\151\156\151\164\145", "\151\156\146\151\156\151\164\145", "\160\145\162\151\157\144\151\143", 
"\156\157\156\160\145\162\151\157\144\151\143", "\145\156\165\155\145\162\141\164\145\144", "\165\160\160\145\162", 
"\154\157\167\145\162", "\111\116\106\53", "\111\116\106\55", 
"\157\142\163\145\162\166\141\164\151\157\156", 
"\157\142\163\145\162\166\141\164\151\157\156\40\163\145\161\165\145\156\143\145", 
"\145\166\151\144\145\156\164\151\141\154\40\163\164\141\164\145\155\145\156\164", "\44", "\134\60", "\164\162\165\145", "\146\141\154\163\145", "\142\157\144", 
"\145\157\144", "\75", "\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\157\162", 
"\141\156\144", "\156\157\164", "\46", "\174", "\53", "\55", "\52", "\57", "\45", 
"\170\157\162", "\156\145\147", "\46\46", "\174\174", "\75\76", "\141\163\141", 
"\146\142\171", "\165\160\157\156", "\167\166\162", "\141\154\141", "\160\142\171", 
"\162\165\160\157\156", "\156\165\160\157\156", "\156\162\165\160\157\156", "\162\167\166\162", 
"\156\167\166\162", "\156\162\167\166\162", "\156\141\163\141", "\156\141\154\141", 
"\143\157\155\142\151\156\145", "\160\162\157\144\165\143\164", "\142\145\154", "\160\154", 
"\134\151\163\123\165\142\103\157\156\164\145\170\164", "\134\144\151\146\146\145\162\145\156\143\145", 
"\134\151\156\164\145\162\163\145\143\164\151\157\156", "\134\165\156\151\157\156", 
"\134\151\163\104\151\155\145\156\163\151\157\156\111\156\103\157\156\164\145\170\164", "\134\151\163\124\141\147\111\156\103\157\156\164\145\170\164", 
"\134\145\170\164\162\141\143\164", "\134\157\166\145\162\162\151\144\145", 
"\134\160\162\157\152\145\143\164\151\157\156", "\134\150\151\144\151\156\147", 
"\134\163\165\142\163\164\151\164\165\164\151\157\156", "\134\143\150\157\157\163\145", 
"\134\165\156\144\151\162\145\143\164\145\144\122\141\156\147\145", "\134\144\151\162\145\143\164\145\144\122\141\156\147\145", "\134\151\156", 
"\146\151\162\163\164", "\156\145\170\164", "\160\162\145\166", "\151\163\145\157\144", 
"\151\163\142\157\144", "\163\145\143\157\156\144", "\154\141\163\164", 
"\160\162\145\154\141\163\164", "\134\147\145\164\144\151\155", "\134\147\145\164\164\141\147", 
"\134\151\163\105\155\160\164\171", "\134\151\163\102\157\170", "\134\151\163\123\145\164", "\100", "\43", 
"\142\157\170", "\145\155\160\164\171", null, null, null, null, null, null, null, null, null, 
null, null, "\50", "\51", "\133", "\135", "\173", "\175", "\73", "\54", "\56", 
"\72", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ForensicLucidParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ForensicLucidParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 86; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0xf3a3ffffffffffffL, 0x7fL, 
};
static final long[] jjtoSkip = {
   0x3feL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3c0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[86];
    private final int[] jjstateSet = new int[2 * 86];

    
    protected char curChar;
}
