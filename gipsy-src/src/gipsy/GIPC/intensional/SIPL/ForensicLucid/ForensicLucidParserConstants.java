/* Generated By:JJTree&JavaCC: Do not edit this line. ForensicLucidParserConstants.java */
package gipsy.GIPC.intensional.SIPL.ForensicLucid;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ForensicLucidParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int FORENSICLUCID_COMMENT = 9;
  /** RegularExpression Id. */
  int DIMENSION = 10;
  /** RegularExpression Id. */
  int END = 11;
  /** RegularExpression Id. */
  int IF = 12;
  /** RegularExpression Id. */
  int THEN = 13;
  /** RegularExpression Id. */
  int ELSE = 14;
  /** RegularExpression Id. */
  int FI = 15;
  /** RegularExpression Id. */
  int WHERE = 16;
  /** RegularExpression Id. */
  int EMBED = 17;
  /** RegularExpression Id. */
  int INT = 18;
  /** RegularExpression Id. */
  int TO = 19;
  /** RegularExpression Id. */
  int STEP = 20;
  /** RegularExpression Id. */
  int ORDERED = 21;
  /** RegularExpression Id. */
  int UNORDERED = 22;
  /** RegularExpression Id. */
  int FINITE = 23;
  /** RegularExpression Id. */
  int INFINITE = 24;
  /** RegularExpression Id. */
  int PERIODIC = 25;
  /** RegularExpression Id. */
  int NONPERIODIC = 26;
  /** RegularExpression Id. */
  int ENUMERATED = 27;
  /** RegularExpression Id. */
  int UPPER = 28;
  /** RegularExpression Id. */
  int LOWER = 29;
  /** RegularExpression Id. */
  int PLUSINF = 30;
  /** RegularExpression Id. */
  int MINUSINF = 31;
  /** RegularExpression Id. */
  int OBSERVATION = 32;
  /** RegularExpression Id. */
  int OBSERVATIONSEQUENCE = 33;
  /** RegularExpression Id. */
  int EVIDENTIALSTATEMENT = 34;
  /** RegularExpression Id. */
  int NOOBSERVATION = 35;
  /** RegularExpression Id. */
  int ZEROOBSERVATION = 36;
  /** RegularExpression Id. */
  int TRUE = 37;
  /** RegularExpression Id. */
  int FALSE = 38;
  /** RegularExpression Id. */
  int BOD = 39;
  /** RegularExpression Id. */
  int EOD = 40;
  /** RegularExpression Id. */
  int ASSIGN = 41;
  /** RegularExpression Id. */
  int GT = 42;
  /** RegularExpression Id. */
  int LT = 43;
  /** RegularExpression Id. */
  int EQ = 44;
  /** RegularExpression Id. */
  int LE = 45;
  /** RegularExpression Id. */
  int GE = 46;
  /** RegularExpression Id. */
  int NE = 47;
  /** RegularExpression Id. */
  int OR = 48;
  /** RegularExpression Id. */
  int AND = 49;
  /** RegularExpression Id. */
  int NOT = 50;
  /** RegularExpression Id. */
  int BITAND = 51;
  /** RegularExpression Id. */
  int BITOR = 52;
  /** RegularExpression Id. */
  int PLUS = 53;
  /** RegularExpression Id. */
  int MINUS = 54;
  /** RegularExpression Id. */
  int STAR = 55;
  /** RegularExpression Id. */
  int SLASH = 56;
  /** RegularExpression Id. */
  int REM = 57;
  /** RegularExpression Id. */
  int XOR = 58;
  /** RegularExpression Id. */
  int NEG = 59;
  /** RegularExpression Id. */
  int ANDAND = 60;
  /** RegularExpression Id. */
  int OROR = 61;
  /** RegularExpression Id. */
  int MAPTO = 62;
  /** RegularExpression Id. */
  int ASA = 63;
  /** RegularExpression Id. */
  int FBY = 64;
  /** RegularExpression Id. */
  int UPON = 65;
  /** RegularExpression Id. */
  int WVR = 66;
  /** RegularExpression Id. */
  int ALA = 67;
  /** RegularExpression Id. */
  int PBY = 68;
  /** RegularExpression Id. */
  int RUPON = 69;
  /** RegularExpression Id. */
  int NUPON = 70;
  /** RegularExpression Id. */
  int NRUPON = 71;
  /** RegularExpression Id. */
  int RWVR = 72;
  /** RegularExpression Id. */
  int NWVR = 73;
  /** RegularExpression Id. */
  int NRWVR = 74;
  /** RegularExpression Id. */
  int NASA = 75;
  /** RegularExpression Id. */
  int NALA = 76;
  /** RegularExpression Id. */
  int COMBINE = 77;
  /** RegularExpression Id. */
  int PRODUCT = 78;
  /** RegularExpression Id. */
  int BEL = 79;
  /** RegularExpression Id. */
  int PL = 80;
  /** RegularExpression Id. */
  int ISSUBCONTEXT = 81;
  /** RegularExpression Id. */
  int DIFFERENCE = 82;
  /** RegularExpression Id. */
  int INTERSECTION = 83;
  /** RegularExpression Id. */
  int UNION = 84;
  /** RegularExpression Id. */
  int ISDIMENSIONINCONTEXT = 85;
  /** RegularExpression Id. */
  int ISTAGINCONTEXT = 86;
  /** RegularExpression Id. */
  int EXTRACT = 87;
  /** RegularExpression Id. */
  int OVERRIDE = 88;
  /** RegularExpression Id. */
  int PROJECTION = 89;
  /** RegularExpression Id. */
  int HIDING = 90;
  /** RegularExpression Id. */
  int SUBSTITUTION = 91;
  /** RegularExpression Id. */
  int CHOOSE = 92;
  /** RegularExpression Id. */
  int UNDIRECTEDRANGE = 93;
  /** RegularExpression Id. */
  int DIRECTEDRANGE = 94;
  /** RegularExpression Id. */
  int ISIN = 95;
  /** RegularExpression Id. */
  int FIRST = 96;
  /** RegularExpression Id. */
  int NEXT = 97;
  /** RegularExpression Id. */
  int PREV = 98;
  /** RegularExpression Id. */
  int ISEOD = 99;
  /** RegularExpression Id. */
  int ISBOD = 100;
  /** RegularExpression Id. */
  int SECOND = 101;
  /** RegularExpression Id. */
  int LAST = 102;
  /** RegularExpression Id. */
  int PRELAST = 103;
  /** RegularExpression Id. */
  int GETDIM = 104;
  /** RegularExpression Id. */
  int GETTAG = 105;
  /** RegularExpression Id. */
  int ISEMPTY = 106;
  /** RegularExpression Id. */
  int ISBOX = 107;
  /** RegularExpression Id. */
  int ISSET = 108;
  /** RegularExpression Id. */
  int AT = 109;
  /** RegularExpression Id. */
  int WHEN = 110;
  /** RegularExpression Id. */
  int BOX = 111;
  /** RegularExpression Id. */
  int EMPTY = 112;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 113;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 114;
  /** RegularExpression Id. */
  int HEX_LITERAL = 115;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 116;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 117;
  /** RegularExpression Id. */
  int EXPONENT = 118;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 119;
  /** RegularExpression Id. */
  int STRING_LITERAL = 120;
  /** RegularExpression Id. */
  int ID = 121;
  /** RegularExpression Id. */
  int LETTER = 122;
  /** RegularExpression Id. */
  int DIGIT = 123;
  /** RegularExpression Id. */
  int LPAREN = 124;
  /** RegularExpression Id. */
  int RPAREN = 125;
  /** RegularExpression Id. */
  int LBRACKET = 126;
  /** RegularExpression Id. */
  int RBRACKET = 127;
  /** RegularExpression Id. */
  int LCURB = 128;
  /** RegularExpression Id. */
  int RCURB = 129;
  /** RegularExpression Id. */
  int SEMICOLON = 130;
  /** RegularExpression Id. */
  int COMMA = 131;
  /** RegularExpression Id. */
  int DOT = 132;
  /** RegularExpression Id. */
  int COLON = 133;
  /** RegularExpression Id. */
  int ILLEGALCHAR = 134;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<FORENSICLUCID_COMMENT>",
    "\"dimension\"",
    "\"end\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"fi\"",
    "\"where\"",
    "\"embed\"",
    "\"int\"",
    "\"to\"",
    "\"step\"",
    "\"ordered\"",
    "\"unordered\"",
    "\"finite\"",
    "\"infinite\"",
    "\"periodic\"",
    "\"nonperiodic\"",
    "\"enumerated\"",
    "\"upper\"",
    "\"lower\"",
    "\"INF+\"",
    "\"INF-\"",
    "\"observation\"",
    "\"observation sequence\"",
    "\"evidential statement\"",
    "\"$\"",
    "\"\\\\0\"",
    "\"true\"",
    "\"false\"",
    "\"bod\"",
    "\"eod\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"&\"",
    "\"|\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"xor\"",
    "\"neg\"",
    "\"&&\"",
    "\"||\"",
    "\"=>\"",
    "\"asa\"",
    "\"fby\"",
    "\"upon\"",
    "\"wvr\"",
    "\"ala\"",
    "\"pby\"",
    "\"rupon\"",
    "\"nupon\"",
    "\"nrupon\"",
    "\"rwvr\"",
    "\"nwvr\"",
    "\"nrwvr\"",
    "\"nasa\"",
    "\"nala\"",
    "\"combine\"",
    "\"product\"",
    "\"bel\"",
    "\"pl\"",
    "\"\\\\isSubContext\"",
    "\"\\\\difference\"",
    "\"\\\\intersection\"",
    "\"\\\\union\"",
    "\"\\\\isDimensionInContext\"",
    "\"\\\\isTagInContext\"",
    "\"\\\\extract\"",
    "\"\\\\override\"",
    "\"\\\\projection\"",
    "\"\\\\hiding\"",
    "\"\\\\substitution\"",
    "\"\\\\choose\"",
    "\"\\\\undirectedRange\"",
    "\"\\\\directedRange\"",
    "\"\\\\in\"",
    "\"first\"",
    "\"next\"",
    "\"prev\"",
    "\"iseod\"",
    "\"isbod\"",
    "\"second\"",
    "\"last\"",
    "\"prelast\"",
    "\"\\\\getdim\"",
    "\"\\\\gettag\"",
    "\"\\\\isEmpty\"",
    "\"\\\\isBox\"",
    "\"\\\\isSet\"",
    "\"@\"",
    "\"#\"",
    "\"box\"",
    "\"empty\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "<ILLEGALCHAR>",
  };

}
