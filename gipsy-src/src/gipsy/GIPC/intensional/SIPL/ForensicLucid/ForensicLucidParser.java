/* ForensicLucidParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ForensicLucidParser.java */
package gipsy.GIPC.intensional.SIPL.ForensicLucid;
import gipsy.GIPC.intensional.SimpleNode;
import gipsy.GIPC.util.Node;
import gipsy.GIPC.util.ParseException;
import gipsy.GIPC.util.SimpleCharStream;
import gipsy.GIPC.util.Token;
import gipsy.GIPC.util.TokenMgrError;
import gipsy.interfaces.AbstractSyntaxTree;
import marf.util.Debug;
import java.util.*;
import gipsy.storage.Dictionary;


/**
 * Does syntactic analysis, outputs an AST. Focuses on the ForensicLucid.
 * Generated by JavaCC automatically.
 *
 * @author Serguei A. Mokhov
 * @version $Id: ForensicLucidParser.java,v 1.11 2013/08/26 21:14:43 mokhov Exp $
 * @see ForensicLucidTreeConstants Provides the constants definition for an AST.
 * @see ForensicLucidConstants     Provides the constants definition for parser.
 */
public class ForensicLucidParser/*@bgen(jjtree)*/implements ForensicLucidParserTreeConstants, ForensicLucidParserConstants {/*@bgen(jjtree)*/
  protected JJTForensicLucidParserState jjtree = new JJTForensicLucidParserState();/**
	 * Error count.
	 */
        private int iErrorCount = 0;

        /**
	 * Parses a ForensicLucid program and produces its AST.
	 * @return abstract syntax tree if parse was successful; null otherwise.
	 */
        public AbstractSyntaxTree parse()
        {
                try
                {
                        System.err.println("ForensicLucid Parser Version $Revision: 1.11 $");

                        //Dictionary oForensicLucidParseDictionary = new Dictionary();

                        /* the start state */
                        SimpleNode oRoot = startParse();
                        System.err.println("Syntactic Errors: " + this.iErrorCount);
                        return new AbstractSyntaxTree(oRoot);
                }
                catch(ParseException e)
                {
                        System.err.println(e);
                        e.printStackTrace(System.err);
                        return null;
                }
        }

        /**
	 * Retrieves number of parse errors.
	 * @return error count
	 */
        public int getErrorCount()
        {
                return this.iErrorCount;
        }

        /**
	 * Re-arranges tree structure for binary operators for poNodeOp (operator) to be the root.
	 * @return resulting parent node
	 */
        public static SimpleNode biOp(SimpleNode poNode1, SimpleNode poNodeOp, SimpleNode poNode3)
        throws ParseException
        {
                poNode1.jjtSetParent(poNodeOp);
                poNode3.jjtSetParent(poNodeOp);
                poNodeOp.jjtAddChild(poNode3, 0);
                poNodeOp.jjtAddChild(poNode1, 1);

                return poNodeOp;
        }

        /**
	 * #Qlist is the list that contains several Qs, these Qs are
	 * made children to the #where node.
	 * @return resulting parent #where node
	 */
        public static SimpleNode where(SimpleNode poNode1, SimpleNode poWhereNode, SimpleNode poNode3)
        throws ParseException
        {
                poNode3.jjtSetParent(poWhereNode);
                poWhereNode.jjtAddChild(poNode3, 0);

                if(poNode1.children != null)
                {
                        int i = poNode1.children.length;
                        Node oInterNode;

                        for(int j = 0; j < i; j++)
                        {
                                oInterNode = poNode1.children[j];
                                oInterNode.jjtSetParent(poWhereNode);
                                poWhereNode.jjtAddChild(oInterNode, j + 1);
                        }
                }

                return poWhereNode;
        }

  void countErrors() throws ParseException {this.iErrorCount++;
  }

  SimpleNode sign(SimpleNode node1, SimpleNode node2) throws ParseException {node1.jjtSetParent(node2);
        node2.jjtAddChild(node1, 0);
        return node2;
  }

  SimpleNode function(SimpleNode node1, SimpleNode node2, SimpleNode node3, SimpleNode node4) throws ParseException {node4.jjtSetParent(node1);
        node3.jjtSetParent(node1);
        node2.jjtSetParent(node1);
        node1.jjtAddChild(node4, 0);
        node1.jjtAddChild(node3, 1);
        node1.jjtAddChild(node2, 2);
        return node1;
  }

  SimpleNode uniOp(SimpleNode node1, SimpleNode node2) throws ParseException {node1.jjtSetParent(node2);
        node2.jjtAddChild(node1, 0);
        return node2;
  }

  SimpleNode ifClause(SimpleNode node1, SimpleNode node2, SimpleNode node3, SimpleNode node4) throws ParseException {node2.jjtSetParent(node1);
        node3.jjtSetParent(node1);
        node4.jjtSetParent(node1);
        node1.jjtAddChild(node2, 0);
        node1.jjtAddChild(node3, 1);
        node1.jjtAddChild(node4, 2);

        return node1;
  }

  SimpleNode makeQlist(SimpleNode child, SimpleNode parent) throws ParseException {child.jjtSetParent(parent);

        if(parent.children != null)
        {
            parent.jjtAddChild(child, parent.children.length);
        }
        else
        {
            parent.jjtAddChild(child, 0);
        }

        return parent;
  }

  SimpleNode assign(SimpleNode node1, SimpleNode node2, SimpleNode node3) throws ParseException {node1.jjtSetParent(node2);
        node3.jjtSetParent(node2);
        node2.jjtAddChild(node1, 0);
        node2.jjtAddChild(node3, 1);

        return node2;
  }

  final public SimpleNode startParse() throws ParseException {/*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        E();
        jj_consume_token(0);
{if ("" != null) return jjtn000;}
      } catch (ParseException e) {
countErrors();
                System.err.println("ForensicLucid Parser: " + e.toString());
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Main grammar expression.
 */
  final public void E() throws ParseException {
    try {
      if (jj_2_1(100)) {
SimpleNode jjtn001 = new SimpleNode(JJTASSIGN);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          ID();
          jj_consume_token(ASSIGN);
          E();
          E1();
        } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
        }
        E1();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:{
SimpleNode jjtn002 = new SimpleNode(JJTIF);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(IF);
            E();
            jj_consume_token(THEN);
            E();
            jj_consume_token(ELSE);
            E();
            jj_consume_token(FI);
          } catch (Throwable jjte002) {
if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
          }
          E1();
          break;
          }
        case WHEN:{
SimpleNode jjtn003 = new SimpleNode(JJTHASH);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(WHEN);
            E();
          } catch (Throwable jjte003) {
if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                  }
          }
          E1();
          break;
          }
        case ORDERED:
        case UNORDERED:
        case NOOBSERVATION:
        case ZEROOBSERVATION:
        case NOT:
        case BEL:
        case PL:
        case FIRST:
        case NEXT:
        case PREV:
        case ISEOD:
        case ISBOD:
        case SECOND:
        case LAST:
        case PRELAST:
        case ISEMPTY:
        case ISBOX:
        case ISSET:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case ID:
        case LPAREN:
        case LBRACKET:
        case LCURB:{
          Term();
          E1();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          if (jj_2_2(100000000)) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PLUS:{
SimpleNode jjtn004 = new SimpleNode(JJTPOSI);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
              try {
                jj_consume_token(PLUS);
              } finally {
if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                      }
              }
              break;
              }
            case MINUS:{
SimpleNode jjtn005 = new SimpleNode(JJTNEGE);
                                     boolean jjtc005 = true;
                                     jjtree.openNodeScope(jjtn005);
              try {
                jj_consume_token(MINUS);
              } finally {
if (jjtc005) {
                                       jjtree.closeNodeScope(jjtn005, true);
                                     }
              }
              break;
              }
            default:
              jj_la1[0] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            Term();
SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // Term
                        SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); // sign
                        SimpleNode node = sign(midNode1, midNode2);
                        jjtree.pushNode(node);
            E1();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PLUSINF:
            case MINUSINF:
            case BOD:
            case EOD:{
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOD:{
SimpleNode jjtn006 = new SimpleNode(JJTEOD);
                    boolean jjtc006 = true;
                    jjtree.openNodeScope(jjtn006);
                try {
                  jj_consume_token(EOD);
                } finally {
if (jjtc006) {
                      jjtree.closeNodeScope(jjtn006, true);
                    }
                }
                break;
                }
              case BOD:{
SimpleNode jjtn007 = new SimpleNode(JJTBOD);
                                 boolean jjtc007 = true;
                                 jjtree.openNodeScope(jjtn007);
                try {
                  jj_consume_token(BOD);
                } finally {
if (jjtc007) {
                                   jjtree.closeNodeScope(jjtn007, true);
                                 }
                }
                break;
                }
              case PLUSINF:{
SimpleNode jjtn008 = new SimpleNode(JJTPLUSINF);
                                              boolean jjtc008 = true;
                                              jjtree.openNodeScope(jjtn008);
                try {
                  jj_consume_token(PLUSINF);
                } finally {
if (jjtc008) {
                                                jjtree.closeNodeScope(jjtn008, true);
                                              }
                }
                break;
                }
              case MINUSINF:{
SimpleNode jjtn009 = new SimpleNode(JJTMINUSINF);
                                                                   boolean jjtc009 = true;
                                                                   jjtree.openNodeScope(jjtn009);
                try {
                  jj_consume_token(MINUSINF);
                } finally {
if (jjtc009) {
                                                                     jjtree.closeNodeScope(jjtn009, true);
                                                                   }
                }
                break;
                }
              default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              E1();
              break;
              }
            case TRUE:
            case FALSE:{
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case TRUE:{
SimpleNode jjtn010 = new SimpleNode(JJTTRUE);
                    boolean jjtc010 = true;
                    jjtree.openNodeScope(jjtn010);
                try {
                  jj_consume_token(TRUE);
                } finally {
if (jjtc010) {
                      jjtree.closeNodeScope(jjtn010, true);
                    }
                }
                break;
                }
              case FALSE:{
SimpleNode jjtn011 = new SimpleNode(JJTFALSE);
                                   boolean jjtc011 = true;
                                   jjtree.openNodeScope(jjtn011);
                try {
                  jj_consume_token(FALSE);
                } finally {
if (jjtc011) {
                                     jjtree.closeNodeScope(jjtn011, true);
                                   }
                }
                break;
                }
              default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              E1();
              break;
              }
            case EMBED:{
              embed();
              E1();
              break;
              }
            default:
              jj_la1[4] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (ParseException e) {
countErrors();
                System.err.println("ForensicLucid Parser: " + e.toString());
    }
  }

  final public void E1() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NE:
      case OR:
      case PLUS:
      case MINUS:
      case XOR:
      case ASA:
      case FBY:
      case UPON:
      case WVR:
      case ALA:
      case PBY:
      case RUPON:
      case NUPON:
      case NRUPON:
      case RWVR:
      case NWVR:
      case NRWVR:
      case NASA:
      case NALA:
      case AT:
      case LPAREN:
      case LBRACKET:
      case DOT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:
        case PLUS:
        case MINUS:
        case XOR:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:{
SimpleNode jjtn001 = new SimpleNode(JJTADD);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
            try {
              jj_consume_token(PLUS);
            } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
            }
            break;
            }
          case MINUS:{
SimpleNode jjtn002 = new SimpleNode(JJTMIN);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
            try {
              jj_consume_token(MINUS);
            } finally {
if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002, true);
                                         }
            }
            break;
            }
          case OR:{
SimpleNode jjtn003 = new SimpleNode(JJTOR);
                                                    boolean jjtc003 = true;
                                                    jjtree.openNodeScope(jjtn003);
            try {
              jj_consume_token(OR);
            } finally {
if (jjtc003) {
                                                      jjtree.closeNodeScope(jjtn003, true);
                                                    }
            }
            break;
            }
          case XOR:{
SimpleNode jjtn004 = new SimpleNode(JJTXOR);
                                                               boolean jjtc004 = true;
                                                               jjtree.openNodeScope(jjtn004);
            try {
              jj_consume_token(XOR);
            } finally {
if (jjtc004) {
                                                                 jjtree.closeNodeScope(jjtn004, true);
                                                               }
            }
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Term();
SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // right (Term in this production)
                                SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // #biOp
                                SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left(Term in E -> Term E1)

                                SimpleNode node = biOp(midNode1, midNode2, midNode3);

                                jjtree.pushNode(node);
          E1();
          break;
          }
        case GT:
        case LT:
        case EQ:
        case LE:
        case GE:
        case NE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LT:{
SimpleNode jjtn005 = new SimpleNode(JJTLT);
                              boolean jjtc005 = true;
                              jjtree.openNodeScope(jjtn005);
            try {
              jj_consume_token(LT);
            } finally {
if (jjtc005) {
                                jjtree.closeNodeScope(jjtn005, true);
                              }
            }
            break;
            }
          case GT:{
SimpleNode jjtn006 = new SimpleNode(JJTGT);
                                        boolean jjtc006 = true;
                                        jjtree.openNodeScope(jjtn006);
            try {
              jj_consume_token(GT);
            } finally {
if (jjtc006) {
                                          jjtree.closeNodeScope(jjtn006, true);
                                        }
            }
            break;
            }
          case GE:{
SimpleNode jjtn007 = new SimpleNode(JJTGE);
                                                  boolean jjtc007 = true;
                                                  jjtree.openNodeScope(jjtn007);
            try {
              jj_consume_token(GE);
            } finally {
if (jjtc007) {
                                                    jjtree.closeNodeScope(jjtn007, true);
                                                  }
            }
            break;
            }
          case LE:{
SimpleNode jjtn008 = new SimpleNode(JJTLE);
                                                             boolean jjtc008 = true;
                                                             jjtree.openNodeScope(jjtn008);
            try {
              jj_consume_token(LE);
            } finally {
if (jjtc008) {
                                                               jjtree.closeNodeScope(jjtn008, true);
                                                             }
            }
            break;
            }
          case EQ:{
SimpleNode jjtn009 = new SimpleNode(JJTEQ);
                                                                        boolean jjtc009 = true;
                                                                        jjtree.openNodeScope(jjtn009);
            try {
              jj_consume_token(EQ);
            } finally {
if (jjtc009) {
                                                                          jjtree.closeNodeScope(jjtn009, true);
                                                                        }
            }
            break;
            }
          case NE:{
SimpleNode jjtn010 = new SimpleNode(JJTNE);
                                                                                   boolean jjtc010 = true;
                                                                                   jjtree.openNodeScope(jjtn010);
            try {
              jj_consume_token(NE);
            } finally {
if (jjtc010) {
                                                                                     jjtree.closeNodeScope(jjtn010, true);
                                                                                   }
            }
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          E();
SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // right
                                SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // relOp
                                SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left

                                SimpleNode node=biOp(midNode1, midNode2, midNode3);

                                jjtree.pushNode(node);
          E1();
          break;
          }
        case AT:
        case DOT:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AT:{
SimpleNode jjtn011 = new SimpleNode(JJTAT);
                            boolean jjtc011 = true;
                            jjtree.openNodeScope(jjtn011);
            try {
              jj_consume_token(AT);
            } finally {
if (jjtc011) {
                              jjtree.closeNodeScope(jjtn011, true);
                            }
            }
            E();
            break;
            }
          case DOT:{
SimpleNode jjtn012 = new SimpleNode(JJTDOT);
                                           boolean jjtc012 = true;
                                           jjtree.openNodeScope(jjtn012);
            try {
              jj_consume_token(DOT);
            } finally {
if (jjtc012) {
                                             jjtree.closeNodeScope(jjtn012, true);
                                           }
            }
            E();
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
SimpleNode oRightArg = (SimpleNode)jjtree.popNode(); // right
                                SimpleNode oOpNode   = (SimpleNode)jjtree.popNode(); // at | "."
                                SimpleNode oLeftArg  = (SimpleNode)jjtree.popNode(); // left

                                SimpleNode oResultNode = biOp(oRightArg, oOpNode, oLeftArg);

                                jjtree.pushNode(oResultNode);
          E1();
          break;
          }
        case WHERE:{
SimpleNode jjtn013 = new SimpleNode(JJTWHERE);
                            boolean jjtc013 = true;
                            jjtree.openNodeScope(jjtn013);
          try {
            jj_consume_token(WHERE);
          } finally {
if (jjtc013) {
                              jjtree.closeNodeScope(jjtn013, true);
                            }
          }
SimpleNode jjtn014 = new SimpleNode(JJTQLIST);
                                           boolean jjtc014 = true;
                                           jjtree.openNodeScope(jjtn014);
          try {
            Q();
          } catch (Throwable jjte014) {
if (jjtc014) {
                                             jjtree.clearNodeScope(jjtn014);
                                             jjtc014 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte014 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte014;}
                                           }
                                           if (jjte014 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte014;}
                                           }
                                           {if (true) throw (Error)jjte014;}
          } finally {
if (jjtc014) {
                                             jjtree.closeNodeScope(jjtn014, true);
                                           }
          }
          jj_consume_token(END);
SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // #Qlist
                                SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // #Where
                                SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // left (E)

                                SimpleNode node = where(midNode1, midNode2, midNode3);

                                jjtree.pushNode(node);
          E1();
          break;
          }
        case LPAREN:
        case LBRACKET:{
          Tail();
SimpleNode midNode1=(SimpleNode) jjtree.popNode(); // #FUN
                                SimpleNode midNode2=(SimpleNode) jjtree.popNode(); // #paras
                                SimpleNode midNode3=(SimpleNode) jjtree.popNode(); // #dim
                                SimpleNode midNode4=(SimpleNode) jjtree.popNode(); // #ID(function name)
                                SimpleNode node=function(midNode1, midNode2, midNode3, midNode4);
                                jjtree.pushNode(node);
          E1();
          break;
          }
        case ASA:
        case FBY:
        case UPON:
        case WVR:
        case ALA:
        case PBY:
        case RUPON:
        case NUPON:
        case NRUPON:
        case RWVR:
        case NWVR:
        case NRWVR:
        case NASA:
        case NALA:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FBY:{
SimpleNode jjtn015 = new SimpleNode(JJTFBY);
                                              boolean jjtc015 = true;
                                              jjtree.openNodeScope(jjtn015);
            try {
              jj_consume_token(FBY);
            } finally {
if (jjtc015) {
                                                jjtree.closeNodeScope(jjtn015, true);
                                              }
            }
            break;
            }
          case WVR:{
SimpleNode jjtn016 = new SimpleNode(JJTWVR);
                                              boolean jjtc016 = true;
                                              jjtree.openNodeScope(jjtn016);
            try {
              jj_consume_token(WVR);
            } finally {
if (jjtc016) {
                                                jjtree.closeNodeScope(jjtn016, true);
                                              }
            }
            break;
            }
          case ASA:{
SimpleNode jjtn017 = new SimpleNode(JJTASA);
                                              boolean jjtc017 = true;
                                              jjtree.openNodeScope(jjtn017);
            try {
              jj_consume_token(ASA);
            } finally {
if (jjtc017) {
                                                jjtree.closeNodeScope(jjtn017, true);
                                              }
            }
            break;
            }
          case UPON:{
SimpleNode jjtn018 = new SimpleNode(JJTUPON);
                                              boolean jjtc018 = true;
                                              jjtree.openNodeScope(jjtn018);
            try {
              jj_consume_token(UPON);
            } finally {
if (jjtc018) {
                                                jjtree.closeNodeScope(jjtn018, true);
                                              }
            }
            break;
            }
          case ALA:{
SimpleNode jjtn019 = new SimpleNode(JJTALA);
                                              boolean jjtc019 = true;
                                              jjtree.openNodeScope(jjtn019);
            try {
              jj_consume_token(ALA);
            } finally {
if (jjtc019) {
                                                jjtree.closeNodeScope(jjtn019, true);
                                              }
            }
            break;
            }
          case PBY:{
SimpleNode jjtn020 = new SimpleNode(JJTPBY);
                                              boolean jjtc020 = true;
                                              jjtree.openNodeScope(jjtn020);
            try {
              jj_consume_token(PBY);
            } finally {
if (jjtc020) {
                                                jjtree.closeNodeScope(jjtn020, true);
                                              }
            }
            break;
            }
          case RUPON:{
SimpleNode jjtn021 = new SimpleNode(JJTRUPON);
                                              boolean jjtc021 = true;
                                              jjtree.openNodeScope(jjtn021);
            try {
              jj_consume_token(RUPON);
            } finally {
if (jjtc021) {
                                                jjtree.closeNodeScope(jjtn021, true);
                                              }
            }
            break;
            }
          case NUPON:{
SimpleNode jjtn022 = new SimpleNode(JJTNUPON);
                                              boolean jjtc022 = true;
                                              jjtree.openNodeScope(jjtn022);
            try {
              jj_consume_token(NUPON);
            } finally {
if (jjtc022) {
                                                jjtree.closeNodeScope(jjtn022, true);
                                              }
            }
            break;
            }
          case NRUPON:{
SimpleNode jjtn023 = new SimpleNode(JJTNRUPON);
                                              boolean jjtc023 = true;
                                              jjtree.openNodeScope(jjtn023);
            try {
              jj_consume_token(NRUPON);
            } finally {
if (jjtc023) {
                                                jjtree.closeNodeScope(jjtn023, true);
                                              }
            }
            break;
            }
          case RWVR:{
SimpleNode jjtn024 = new SimpleNode(JJTRWVR);
                                              boolean jjtc024 = true;
                                              jjtree.openNodeScope(jjtn024);
            try {
              jj_consume_token(RWVR);
            } finally {
if (jjtc024) {
                                                jjtree.closeNodeScope(jjtn024, true);
                                              }
            }
            break;
            }
          case NWVR:{
SimpleNode jjtn025 = new SimpleNode(JJTNWVR);
                                              boolean jjtc025 = true;
                                              jjtree.openNodeScope(jjtn025);
            try {
              jj_consume_token(NWVR);
            } finally {
if (jjtc025) {
                                                jjtree.closeNodeScope(jjtn025, true);
                                              }
            }
            break;
            }
          case NRWVR:{
SimpleNode jjtn026 = new SimpleNode(JJTNRWVR);
                                              boolean jjtc026 = true;
                                              jjtree.openNodeScope(jjtn026);
            try {
              jj_consume_token(NRWVR);
            } finally {
if (jjtc026) {
                                                jjtree.closeNodeScope(jjtn026, true);
                                              }
            }
            break;
            }
          case NASA:{
SimpleNode jjtn027 = new SimpleNode(JJTNASA);
                                              boolean jjtc027 = true;
                                              jjtree.openNodeScope(jjtn027);
            try {
              jj_consume_token(NASA);
            } finally {
if (jjtc027) {
                                                jjtree.closeNodeScope(jjtn027, true);
                                              }
            }
            break;
            }
          case NALA:{
SimpleNode jjtn028 = new SimpleNode(JJTNALA);
                                              boolean jjtc028 = true;
                                              jjtree.openNodeScope(jjtn028);
            try {
              jj_consume_token(NALA);
            } finally {
if (jjtc028) {
                                                jjtree.closeNodeScope(jjtn028, true);
                                              }
            }
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          E();
SimpleNode oMidNode1 = (SimpleNode)jjtree.popNode(); // E / id-right
                                SimpleNode oMidNode2 = (SimpleNode)jjtree.popNode(); // lucidop, e.g. fby
                                SimpleNode oMidNode3 = (SimpleNode)jjtree.popNode(); // left

                                SimpleNode oNode = biOp(oMidNode1, oMidNode2, oMidNode3);

                                jjtree.pushNode(oNode);
          E1();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (ParseException e) {
countErrors();
                System.err.println(e.toString());
    }
  }

// Modified
  final public void Tail() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
SimpleNode jjtn001 = new SimpleNode(JJTDIM);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          E();
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              break label_1;
            }
            jj_consume_token(COMMA);
            E();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
        }
        jj_consume_token(RBRACKET);
        jj_consume_token(LPAREN);
SimpleNode jjtn002 = new SimpleNode(JJTPARAS);
                                                                                boolean jjtc002 = true;
                                                                                jjtree.openNodeScope(jjtn002);
        try {
          E();
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              break label_2;
            }
            jj_consume_token(COMMA);
            E();
          }
        } catch (Throwable jjte002) {
if (jjtc002) {
                                                                                  jjtree.clearNodeScope(jjtn002);
                                                                                  jjtc002 = false;
                                                                                } else {
                                                                                  jjtree.popNode();
                                                                                }
                                                                                if (jjte002 instanceof RuntimeException) {
                                                                                  {if (true) throw (RuntimeException)jjte002;}
                                                                                }
                                                                                if (jjte002 instanceof ParseException) {
                                                                                  {if (true) throw (ParseException)jjte002;}
                                                                                }
                                                                                {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                                }
        }
SimpleNode jjtn003 = new SimpleNode(JJTFUN);
                                                                                                                 boolean jjtc003 = true;
                                                                                                                 jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(RPAREN);
        } finally {
if (jjtc003) {
                                                                                                                   jjtree.closeNodeScope(jjtn003, true);
                                                                                                                 }
        }
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
SimpleNode jjtn004 = new SimpleNode(JJTPARAS);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
        try {
          E();
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              break label_3;
            }
            jj_consume_token(COMMA);
            E();
          }
        } catch (Throwable jjte004) {
if (jjtc004) {
                                jjtree.clearNodeScope(jjtn004);
                                jjtc004 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte004 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte004;}
                              }
                              if (jjte004 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte004;}
                              }
                              {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, true);
                              }
        }
SimpleNode jjtn005 = new SimpleNode(JJTFUN);
                                                               boolean jjtc005 = true;
                                                               jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(RPAREN);
        } finally {
if (jjtc005) {
                                                                 jjtree.closeNodeScope(jjtn005, true);
                                                               }
        }
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
countErrors();
                System.err.println(e.toString());
                e.printStackTrace(System.err);
    }
  }

  final public void Term() throws ParseException {
    factor();
    Term1();
  }

  final public void Term1() throws ParseException {
    if (jj_2_3(100)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
SimpleNode jjtn001 = new SimpleNode(JJTTIMES);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(STAR);
        } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
        }
        break;
        }
      case SLASH:{
SimpleNode jjtn002 = new SimpleNode(JJTDIV);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(SLASH);
        } finally {
if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
        }
        break;
        }
      case REM:{
SimpleNode jjtn003 = new SimpleNode(JJTMOD);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(REM);
        } finally {
if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                            }
        }
        break;
        }
      case AND:{
SimpleNode jjtn004 = new SimpleNode(JJTAND);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(AND);
        } finally {
if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                            }
        }
        break;
        }
      case EXTRACT:{
SimpleNode jjtn005 = new SimpleNode(JJTEXTRACT);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(EXTRACT);
        } finally {
if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                            }
        }
        break;
        }
      case OVERRIDE:{
SimpleNode jjtn006 = new SimpleNode(JJTOVERRIDE);
                            boolean jjtc006 = true;
                            jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(OVERRIDE);
        } finally {
if (jjtc006) {
                              jjtree.closeNodeScope(jjtn006, true);
                            }
        }
        break;
        }
      case PROJECTION:{
SimpleNode jjtn007 = new SimpleNode(JJTPROJECTION);
                            boolean jjtc007 = true;
                            jjtree.openNodeScope(jjtn007);
        try {
          jj_consume_token(PROJECTION);
        } finally {
if (jjtc007) {
                              jjtree.closeNodeScope(jjtn007, true);
                            }
        }
        break;
        }
      case HIDING:{
SimpleNode jjtn008 = new SimpleNode(JJTHIDING);
                            boolean jjtc008 = true;
                            jjtree.openNodeScope(jjtn008);
        try {
          jj_consume_token(HIDING);
        } finally {
if (jjtc008) {
                              jjtree.closeNodeScope(jjtn008, true);
                            }
        }
        break;
        }
      case DIFFERENCE:{
SimpleNode jjtn009 = new SimpleNode(JJTDIFFERENCE);
                            boolean jjtc009 = true;
                            jjtree.openNodeScope(jjtn009);
        try {
          jj_consume_token(DIFFERENCE);
        } finally {
if (jjtc009) {
                              jjtree.closeNodeScope(jjtn009, true);
                            }
        }
        break;
        }
      case SUBSTITUTION:{
SimpleNode jjtn010 = new SimpleNode(JJTSUBSTITUTION);
                            boolean jjtc010 = true;
                            jjtree.openNodeScope(jjtn010);
        try {
          jj_consume_token(SUBSTITUTION);
        } finally {
if (jjtc010) {
                              jjtree.closeNodeScope(jjtn010, true);
                            }
        }
        break;
        }
      case INTERSECTION:{
SimpleNode jjtn011 = new SimpleNode(JJTINTERSECTION);
                            boolean jjtc011 = true;
                            jjtree.openNodeScope(jjtn011);
        try {
          jj_consume_token(INTERSECTION);
        } finally {
if (jjtc011) {
                              jjtree.closeNodeScope(jjtn011, true);
                            }
        }
        break;
        }
      case UNION:{
SimpleNode jjtn012 = new SimpleNode(JJTUNION);
                            boolean jjtc012 = true;
                            jjtree.openNodeScope(jjtn012);
        try {
          jj_consume_token(UNION);
        } finally {
if (jjtc012) {
                              jjtree.closeNodeScope(jjtn012, true);
                            }
        }
        break;
        }
      case CHOOSE:{
SimpleNode jjtn013 = new SimpleNode(JJTCHOOSE);
                            boolean jjtc013 = true;
                            jjtree.openNodeScope(jjtn013);
        try {
          jj_consume_token(CHOOSE);
        } finally {
if (jjtc013) {
                              jjtree.closeNodeScope(jjtn013, true);
                            }
        }
        break;
        }
      case ISSUBCONTEXT:{
SimpleNode jjtn014 = new SimpleNode(JJTISSUBCONTEXT);
                            boolean jjtc014 = true;
                            jjtree.openNodeScope(jjtn014);
        try {
          jj_consume_token(ISSUBCONTEXT);
        } finally {
if (jjtc014) {
                              jjtree.closeNodeScope(jjtn014, true);
                            }
        }
        break;
        }
      case ISIN:{
SimpleNode jjtn015 = new SimpleNode(JJTISIN);
                            boolean jjtc015 = true;
                            jjtree.openNodeScope(jjtn015);
        try {
          jj_consume_token(ISIN);
        } finally {
if (jjtc015) {
                              jjtree.closeNodeScope(jjtn015, true);
                            }
        }
        break;
        }
      case UNDIRECTEDRANGE:{
SimpleNode jjtn016 = new SimpleNode(JJTUNDIRECTEDRANGE);
                            boolean jjtc016 = true;
                            jjtree.openNodeScope(jjtn016);
        try {
          jj_consume_token(UNDIRECTEDRANGE);
        } finally {
if (jjtc016) {
                              jjtree.closeNodeScope(jjtn016, true);
                            }
        }
        break;
        }
      case DIRECTEDRANGE:{
SimpleNode jjtn017 = new SimpleNode(JJTDIRECTEDRANGE);
                            boolean jjtc017 = true;
                            jjtree.openNodeScope(jjtn017);
        try {
          jj_consume_token(DIRECTEDRANGE);
        } finally {
if (jjtc017) {
                              jjtree.closeNodeScope(jjtn017, true);
                            }
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // right
                        SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); // biOp
                        SimpleNode midNode3 = (SimpleNode)jjtree.popNode(); // left
//	   if(!(midNode1.toString().equals(midNode3.toString())))
//	   {
//	   	   System.err.println("Semantic Error at line " + token.beginLine + ", column " + token.next.beginColumn+": Two operands must be of the same type.");
//	       countErrors();
//	   }
                        SimpleNode node=biOp(midNode1, midNode2, midNode3);
                        jjtree.pushNode(node);
      Term1();
    } else {
      ;
    }
  }

  final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      ID();
      break;
      }
    case INTEGER_LITERAL:{
      INTEGER();
      break;
      }
    case FLOATING_POINT_LITERAL:{
      FLOAT();
      break;
      }
    case STRING_LITERAL:{
      STRING();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_4(100)) {
        ARRAY();
      } else if (jj_2_5(100000000)) {
        jj_consume_token(LPAREN);
        E();
        jj_consume_token(RPAREN);
      } else if (jj_2_6(100000000)) {
SimpleNode jjtn001 = new SimpleNode(JJTNOT);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(NOT);
          jj_consume_token(LPAREN);
          E();
          jj_consume_token(RPAREN);
        } catch (Throwable jjte001) {
if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                 }
        }
      } else if (jj_2_7(100000000)) {
        unary();
      } else if (jj_2_8(100000000)) {
        context_simple();
      } else if (jj_2_9(100000000)) {
        context_set();
      } else if (jj_2_10(100000000)) {
        context_forensic();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BEL:
    case PL:
    case FIRST:
    case NEXT:
    case PREV:
    case SECOND:
    case LAST:
    case PRELAST:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FIRST:{
SimpleNode jjtn001 = new SimpleNode(JJTUNIOP);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(FIRST);
        } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
        }
        break;
        }
      case NEXT:{
SimpleNode jjtn002 = new SimpleNode(JJTNEXT);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(NEXT);
        } finally {
if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
        }
        break;
        }
      case PREV:{
SimpleNode jjtn003 = new SimpleNode(JJTPREV);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(PREV);
        } finally {
if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                      }
        }
        break;
        }
      case SECOND:{
SimpleNode jjtn004 = new SimpleNode(JJTSECOND);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(SECOND);
        } finally {
if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                      }
        }
        break;
        }
      case LAST:{
SimpleNode jjtn005 = new SimpleNode(JJTLAST);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(LAST);
        } finally {
if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
        }
        break;
        }
      case PRELAST:{
SimpleNode jjtn006 = new SimpleNode(JJTPRELAST);
                      boolean jjtc006 = true;
                      jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(PRELAST);
        } finally {
if (jjtc006) {
                        jjtree.closeNodeScope(jjtn006, true);
                      }
        }
        break;
        }
      case BEL:{
SimpleNode jjtn007 = new SimpleNode(JJTBEL);
                      boolean jjtc007 = true;
                      jjtree.openNodeScope(jjtn007);
        try {
          jj_consume_token(BEL);
        } finally {
if (jjtc007) {
                        jjtree.closeNodeScope(jjtn007, true);
                      }
        }
        break;
        }
      case PL:{
SimpleNode jjtn008 = new SimpleNode(JJTPL);
                      boolean jjtc008 = true;
                      jjtree.openNodeScope(jjtn008);
        try {
          jj_consume_token(PL);
        } finally {
if (jjtc008) {
                        jjtree.closeNodeScope(jjtn008, true);
                      }
        }
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E();
SimpleNode oMidNode1 = (SimpleNode)jjtree.popNode(); // E
            SimpleNode oMidNode2 = (SimpleNode)jjtree.popNode(); // uniOp
                SimpleNode oNode = uniOp(oMidNode1, oMidNode2);
                jjtree.pushNode(oNode);
      break;
      }
    case ISEOD:{
SimpleNode jjtn009 = new SimpleNode(JJTISEOD);
            boolean jjtc009 = true;
            jjtree.openNodeScope(jjtn009);
      try {
        jj_consume_token(ISEOD);
        jj_consume_token(LBRACKET);
        E();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          E();
        }
        jj_consume_token(RBRACKET);
        jj_consume_token(LPAREN);
        E();
        jj_consume_token(RPAREN);
      } catch (Throwable jjte009) {
if (jjtc009) {
              jjtree.clearNodeScope(jjtn009);
              jjtc009 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte009 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte009;}
            }
            if (jjte009 instanceof ParseException) {
              {if (true) throw (ParseException)jjte009;}
            }
            {if (true) throw (Error)jjte009;}
      } finally {
if (jjtc009) {
              jjtree.closeNodeScope(jjtn009, true);
            }
      }
      break;
      }
    case ISBOD:{
SimpleNode jjtn010 = new SimpleNode(JJTISBOD);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
      try {
        jj_consume_token(ISBOD);
        jj_consume_token(LBRACKET);
        E();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          E();
        }
        jj_consume_token(RBRACKET);
        jj_consume_token(LPAREN);
        E();
        jj_consume_token(RPAREN);
      } catch (Throwable jjte010) {
if (jjtc010) {
              jjtree.clearNodeScope(jjtn010);
              jjtc010 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte010 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte010;}
            }
            if (jjte010 instanceof ParseException) {
              {if (true) throw (ParseException)jjte010;}
            }
            {if (true) throw (Error)jjte010;}
      } finally {
if (jjtc010) {
              jjtree.closeNodeScope(jjtn010, true);
            }
      }
      break;
      }
    case ISEMPTY:{
SimpleNode jjtn011 = new SimpleNode(JJTISEMPTY);
          boolean jjtc011 = true;
          jjtree.openNodeScope(jjtn011);
      try {
        jj_consume_token(ISEMPTY);
      } finally {
if (jjtc011) {
            jjtree.closeNodeScope(jjtn011, true);
          }
      }
      E();
SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // E
                SimpleNode midNode2 = (SimpleNode)jjtree.popNode();
                SimpleNode node = uniOp(midNode1, midNode2);
                jjtree.pushNode(node);
      break;
      }
    case ISSET:{
SimpleNode jjtn012 = new SimpleNode(JJTISSET);
          boolean jjtc012 = true;
          jjtree.openNodeScope(jjtn012);
      try {
        jj_consume_token(ISSET);
      } finally {
if (jjtc012) {
            jjtree.closeNodeScope(jjtn012, true);
          }
      }
      E();
SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // E
                SimpleNode midNode2 = (SimpleNode)jjtree.popNode();
                SimpleNode node = uniOp(midNode1, midNode2);
                jjtree.pushNode(node);
      break;
      }
    case ISBOX:{
SimpleNode jjtn013 = new SimpleNode(JJTISBOX);
              boolean jjtc013 = true;
              jjtree.openNodeScope(jjtn013);
      try {
        jj_consume_token(ISBOX);
      } finally {
if (jjtc013) {
                jjtree.closeNodeScope(jjtn013, true);
              }
      }
      E();
SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // E
                SimpleNode midNode2 = (SimpleNode)jjtree.popNode();
                SimpleNode node = uniOp(midNode1, midNode2);
                jjtree.pushNode(node);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void context_simple() throws ParseException {
int iCount = 0;
    jj_consume_token(LBRACKET);
SimpleNode jjtn001 = new SimpleNode(JJTSIMPLECONTEXT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      context_element(iCount);
iCount++;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        context_element(iCount);
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
    jj_consume_token(RBRACKET);
  }

  final public void context_set() throws ParseException {
    jj_consume_token(LCURB);
SimpleNode jjtn001 = new SimpleNode(JJTCONTEXTSET);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
    try {
      context_simple();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        context_simple();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
    }
    jj_consume_token(RCURB);
  }

//void context_box():{}
//     
//{
//      <BOX>  <LPAREN> ID() ID_p() #DEF <COLON> #CONTEXT_BOX E() <RPAREN>
//     {
//     	SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // E
//		SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); // context_box
//		SimpleNode midNode3 = (SimpleNode)jjtree.popNode(); // DEF
//		SimpleNode midNode4 = (SimpleNode)jjtree.popNode(); //1st id
//		SimpleNode node = j_context_box(midNode1, midNode2, midNode3, midNode4);
//		jjtree.pushNode(node);
//     } 
//}
  final public 
void context_element(int pcount) throws ParseException {
    E();
SimpleNode jjtn001 = new SimpleNode(JJTCONTEXT_ELEMENT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(COLON);
    } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
    }
    E();
SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); //E()
                SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); //#CONTEXT_ELEMENT
                SimpleNode midNode3 = (SimpleNode)jjtree.popNode(); //E()

                midNode3.jjtSetParent(midNode2);
                midNode1.jjtSetParent(midNode2);
                midNode2.jjtAddChild(midNode3, 0);
                midNode2.jjtAddChild(midNode1, 1);

                if
                (
                        pcount != 0
                        &&
                        ((SimpleNode)jjtree.peekNode()).jjtGetChild(0).toString().equals
                        (
                                ((SimpleNode)midNode2).jjtGetChild(0).toString()
                        )
                )
                {
                        System.err.println
                        (
                                "Semantic error at line:" + token.beginLine
                                + ", column " + token.next.beginColumn + ".\u005cn"
                                + "Duplicate dimension ID: this is not a simple context!"
                        );
                        this.countErrors();
                }

                jjtree.pushNode(midNode2);
  }

  final public void context_forensic() throws ParseException {/*@bgen(jjtree) FORENSICCONTEXT */
  SimpleNode jjtn000 = new SimpleNode(JJTFORENSICCONTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOOBSERVATION:
      case ZEROOBSERVATION:
      case LPAREN:{
        propertyExtra();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        if (jj_2_11(300)) {
          observationSequenceGeneral();
        } else if (jj_2_12(300)) {
          evidentialStatementGeneral();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Q() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIMENSION:{
SimpleNode jjtn001 = new SimpleNode(JJTDIMENSION);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(DIMENSION);
          ID();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COLON:{
            jj_consume_token(COLON);
            tagset();
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
        } catch (Throwable jjte001) {
if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
        }
        break;
        }
      case OBSERVATION:{
SimpleNode jjtn002 = new SimpleNode(JJTOBSERVATION);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(OBSERVATION);
          ID();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASSIGN:{
            jj_consume_token(ASSIGN);
            observedProperty();
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
        } catch (Throwable jjte002) {
if (jjtc002) {
                              jjtree.clearNodeScope(jjtn002);
                              jjtc002 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte002 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte002;}
                            }
                            if (jjte002 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte002;}
                            }
                            {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
        }
        break;
        }
      case OBSERVATIONSEQUENCE:{
SimpleNode jjtn003 = new SimpleNode(JJTOBSERVATIONSEQUENCE);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(OBSERVATIONSEQUENCE);
          ID();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASSIGN:{
            jj_consume_token(ASSIGN);
            observationSequence();
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
        } catch (Throwable jjte003) {
if (jjtc003) {
                              jjtree.clearNodeScope(jjtn003);
                              jjtc003 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte003 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte003;}
                            }
                            if (jjte003 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte003;}
                            }
                            {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                            }
        }
        break;
        }
      case EVIDENTIALSTATEMENT:{
SimpleNode jjtn004 = new SimpleNode(JJTEVIDENTIALSTATEMENT);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(EVIDENTIALSTATEMENT);
          ID();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASSIGN:{
            jj_consume_token(ASSIGN);
            evidentialStatement();
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
        } catch (Throwable jjte004) {
if (jjtc004) {
                              jjtree.clearNodeScope(jjtn004);
                              jjtc004 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte004 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte004;}
                            }
                            if (jjte004 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte004;}
                            }
                            {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                            }
        }
        break;
        }
      case IF:
      case EMBED:
      case ORDERED:
      case UNORDERED:
      case PLUSINF:
      case MINUSINF:
      case NOOBSERVATION:
      case ZEROOBSERVATION:
      case TRUE:
      case FALSE:
      case BOD:
      case EOD:
      case NOT:
      case PLUS:
      case MINUS:
      case BEL:
      case PL:
      case FIRST:
      case NEXT:
      case PREV:
      case ISEOD:
      case ISBOD:
      case SECOND:
      case LAST:
      case PRELAST:
      case ISEMPTY:
      case ISBOX:
      case ISSET:
      case WHEN:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case ID:
      case LPAREN:
      case LBRACKET:
      case LCURB:{
        E();
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_8:
      while (true) {
        if (jj_2_13(100)) {
          ;
        } else {
          break label_8;
        }
        Q();
      }
    } catch (ParseException e) {
countErrors();

                System.err.println(e.toString());

                // Skip tokens to the next semicolon
                Token oToken;
                do
                {
                        oToken = getNextToken();
                }
                while(oToken.kind != SEMICOLON);
    }
  }

/**
 * Original GIPL.
 */
  final public void QTail() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
SimpleNode jjtn001 = new SimpleNode(JJTDIM);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          ID();
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[29] = jj_gen;
              break label_9;
            }
            jj_consume_token(COMMA);
            ID();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
        }
        jj_consume_token(RBRACKET);
        jj_consume_token(LPAREN);
SimpleNode jjtn002 = new SimpleNode(JJTPARAS);
                                                                                  boolean jjtc002 = true;
                                                                                  jjtree.openNodeScope(jjtn002);
        try {
          ID();
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[30] = jj_gen;
              break label_10;
            }
            jj_consume_token(COMMA);
            ID();
          }
        } catch (Throwable jjte002) {
if (jjtc002) {
                                                                                    jjtree.clearNodeScope(jjtn002);
                                                                                    jjtc002 = false;
                                                                                  } else {
                                                                                    jjtree.popNode();
                                                                                  }
                                                                                  if (jjte002 instanceof RuntimeException) {
                                                                                    {if (true) throw (RuntimeException)jjte002;}
                                                                                  }
                                                                                  if (jjte002 instanceof ParseException) {
                                                                                    {if (true) throw (ParseException)jjte002;}
                                                                                  }
                                                                                  {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                                  }
        }
SimpleNode jjtn003 = new SimpleNode(JJTFUN);
                                                                                                                    boolean jjtc003 = true;
                                                                                                                    jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(RPAREN);
        } finally {
if (jjtc003) {
                                                                                                                      jjtree.closeNodeScope(jjtn003, true);
                                                                                                                    }
        }
SimpleNode midNode1 = (SimpleNode)jjtree.popNode(); // #FUN
                        SimpleNode midNode2 = (SimpleNode)jjtree.popNode(); // #paras
                        SimpleNode midNode3 = (SimpleNode)jjtree.popNode(); // #dim
                        SimpleNode midNode4 = (SimpleNode)jjtree.popNode(); // #function name
                        midNode4.jjtSetParent(midNode1);
                        midNode3.jjtSetParent(midNode1);
                        midNode2.jjtSetParent(midNode1);
                        midNode1.jjtAddChild(midNode4, 0);
                        midNode1.jjtAddChild(midNode3, 1);
                        midNode1.jjtAddChild(midNode2, 2);
                        jjtree.pushNode(midNode1);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
    } catch (ParseException e) {
countErrors();
                System.err.println(e.toString());

                Token oToken;
                do
                {
                        oToken = getNextToken();
                }
                while(oToken.kind != SEMICOLON);
    }
  }

/**
 * o = (P, min, max, w, t)
 * o = (P, min, max, w)
 * o = (P, min, max)
 * o = (P, min)
 * o = P
 * o = $ (no-observation)
 * o = \0(P) (zero observation)
 */
  final public void observedProperty() throws ParseException {/*@bgen(jjtree) OBSERVATION */
  SimpleNode jjtn000 = new SimpleNode(JJTOBSERVATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(100)) {
        property();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOOBSERVATION:
        case ZEROOBSERVATION:
        case LPAREN:{
          propertyExtra();
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * P may have an optionally mapped description to it for reporting.
 */
  final public void property() throws ParseException {/*@bgen(jjtree) PROPERTY */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      E();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAPTO:{
        jj_consume_token(MAPTO);
        jj_consume_token(STRING_LITERAL);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * 
 */
  final public void propertyExtra() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOOBSERVATION:{
SimpleNode jjtn001 = new SimpleNode(JJTNOOBSERVATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(NOOBSERVATION);
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
      }
    case ZEROOBSERVATION:{
SimpleNode jjtn002 = new SimpleNode(JJTZEROOBSERVATION);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(ZEROOBSERVATION);
        jj_consume_token(LPAREN);
        property();
        jj_consume_token(RPAREN);
      } catch (Throwable jjte002) {
if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      property();
      jj_consume_token(COMMA);
SimpleNode jjtn003 = new SimpleNode(JJTOMIN);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
      try {
        E();
      } catch (Throwable jjte003) {
if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte003;}
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte003;}
                                        }
                                        {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003, true);
                                        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
SimpleNode jjtn004 = new SimpleNode(JJTOMAX);
                                                            boolean jjtc004 = true;
                                                            jjtree.openNodeScope(jjtn004);
        try {
          E();
        } catch (Throwable jjte004) {
if (jjtc004) {
                                                              jjtree.clearNodeScope(jjtn004);
                                                              jjtc004 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte004 instanceof RuntimeException) {
                                                              {if (true) throw (RuntimeException)jjte004;}
                                                            }
                                                            if (jjte004 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte004;}
                                                            }
                                                            {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
                                                              jjtree.closeNodeScope(jjtn004, true);
                                                            }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
SimpleNode jjtn005 = new SimpleNode(JJTOWEIGHT);
                                                                                 boolean jjtc005 = true;
                                                                                 jjtree.openNodeScope(jjtn005);
          try {
            E();
          } catch (Throwable jjte005) {
if (jjtc005) {
                                                                                   jjtree.clearNodeScope(jjtn005);
                                                                                   jjtc005 = false;
                                                                                 } else {
                                                                                   jjtree.popNode();
                                                                                 }
                                                                                 if (jjte005 instanceof RuntimeException) {
                                                                                   {if (true) throw (RuntimeException)jjte005;}
                                                                                 }
                                                                                 if (jjte005 instanceof ParseException) {
                                                                                   {if (true) throw (ParseException)jjte005;}
                                                                                 }
                                                                                 {if (true) throw (Error)jjte005;}
          } finally {
if (jjtc005) {
                                                                                   jjtree.closeNodeScope(jjtn005, true);
                                                                                 }
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            jj_consume_token(COMMA);
SimpleNode jjtn006 = new SimpleNode(JJTOTIME);
                                                                                                         boolean jjtc006 = true;
                                                                                                         jjtree.openNodeScope(jjtn006);
            try {
              E();
            } catch (Throwable jjte006) {
if (jjtc006) {
                                                                                                           jjtree.clearNodeScope(jjtn006);
                                                                                                           jjtc006 = false;
                                                                                                         } else {
                                                                                                           jjtree.popNode();
                                                                                                         }
                                                                                                         if (jjte006 instanceof RuntimeException) {
                                                                                                           {if (true) throw (RuntimeException)jjte006;}
                                                                                                         }
                                                                                                         if (jjte006 instanceof ParseException) {
                                                                                                           {if (true) throw (ParseException)jjte006;}
                                                                                                         }
                                                                                                         {if (true) throw (Error)jjte006;}
            } finally {
if (jjtc006) {
                                                                                                           jjtree.closeNodeScope(jjtn006, true);
                                                                                                         }
            }
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * os = o
 * os = {o1, o2, o3, ...}
 */
  final public void observationSequence() throws ParseException {/*@bgen(jjtree) OBSERVATIONSEQUENCE */
  SimpleNode jjtn000 = new SimpleNode(JJTOBSERVATIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_15(300)) {
        observedProperty();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORDERED:
        case LCURB:{
          observationSequenceGeneral();
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void observationSequenceGeneral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDERED:{
      jj_consume_token(ORDERED);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINITE:{
        jj_consume_token(FINITE);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(LCURB);
    observedProperty();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      observedProperty();
    }
    jj_consume_token(RCURB);
  }

/**
 * es = os
 * es = {os1, os2, os3, ...}
 */
  final public void evidentialStatement() throws ParseException {/*@bgen(jjtree) EVIDENTIALSTATEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTEVIDENTIALSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_16(300)) {
        observationSequence();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNORDERED:
        case LCURB:{
          evidentialStatementGeneral();
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void evidentialStatementGeneral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNORDERED:{
      jj_consume_token(UNORDERED);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINITE:{
        jj_consume_token(FINITE);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(LCURB);
    observationSequence();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      observationSequence();
    }
    jj_consume_token(RCURB);
  }

/**
 * Lucx's tag sets.
 */
  final public void tagset() throws ParseException {
    if (jj_2_23(300)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDERED:{
        jj_consume_token(ORDERED);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      if (jj_2_19(300)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FINITE:{
          jj_consume_token(FINITE);
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        if (jj_2_17(300)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PERIODIC:{
            jj_consume_token(PERIODIC);
            break;
            }
          default:
            jj_la1[48] = jj_gen;
            ;
          }
          jj_consume_token(LCURB);
          orderdedFinitePeriodicTagSet();
          jj_consume_token(RCURB);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NONPERIODIC:
          case LCURB:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NONPERIODIC:{
              jj_consume_token(NONPERIODIC);
              break;
              }
            default:
              jj_la1[49] = jj_gen;
              ;
            }
            jj_consume_token(LCURB);
            orderdedFiniteNonperiodicTagSet();
            jj_consume_token(RCURB);
            break;
            }
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else if (jj_2_20(300)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INFINITE:{
          jj_consume_token(INFINITE);
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        if (jj_2_18(300)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PERIODIC:{
            jj_consume_token(PERIODIC);
            break;
            }
          default:
            jj_la1[52] = jj_gen;
            ;
          }
          jj_consume_token(LCURB);
          orderedInfinitePeriodicTagSet();
          jj_consume_token(RCURB);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NONPERIODIC:
          case LCURB:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NONPERIODIC:{
              jj_consume_token(NONPERIODIC);
              break;
              }
            default:
              jj_la1[53] = jj_gen;
              ;
            }
            jj_consume_token(LCURB);
            orderedInfiniteNonperiodicTagSet();
            jj_consume_token(RCURB);
            break;
            }
          default:
            jj_la1[54] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_24(300)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNORDERED:{
        jj_consume_token(UNORDERED);
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      if (jj_2_22(300)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FINITE:{
          jj_consume_token(FINITE);
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          ;
        }
        if (jj_2_21(300)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PERIODIC:{
            jj_consume_token(PERIODIC);
            break;
            }
          default:
            jj_la1[57] = jj_gen;
            ;
          }
          jj_consume_token(LCURB);
          unorderedFinitePeriodicTagSet();
          jj_consume_token(RCURB);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NONPERIODIC:
          case LCURB:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NONPERIODIC:{
              jj_consume_token(NONPERIODIC);
              break;
              }
            default:
              jj_la1[58] = jj_gen;
              ;
            }
            jj_consume_token(LCURB);
            unorderedFiniteNonperiodicTagSet();
            jj_consume_token(RCURB);
            break;
            }
          default:
            jj_la1[59] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INFINITE:{
          jj_consume_token(INFINITE);
          jj_consume_token(PERIODIC);
          jj_consume_token(LCURB);
          unorderedInfinitePeriodicTagSet();
          jj_consume_token(RCURB);
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// ORDEREDFINITEPERIODICTAGSET
//     /               \
//   PERIOD          TIMES
  final public void orderdedFinitePeriodicTagSet() throws ParseException {
SimpleNode jjtn003 = new SimpleNode(JJTORDEREDFINITEPERIODICTAGSET);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
    try {
      jj_consume_token(LT);
SimpleNode jjtn001 = new SimpleNode(JJTPERIOD);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        E();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[61] = jj_gen;
            break label_13;
          }
          jj_consume_token(COMMA);
          E();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      jj_consume_token(GT);
      jj_consume_token(COLON);
SimpleNode jjtn002 = new SimpleNode(JJTTIMES);
                                                             boolean jjtc002 = true;
                                                             jjtree.openNodeScope(jjtn002);
      try {
        INTEGER();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                               jjtree.clearNodeScope(jjtn002);
                                                               jjtc002 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte002 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte002;}
                                                             }
                                                             if (jjte002 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte002;}
                                                             }
                                                             {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                               jjtree.closeNodeScope(jjtn002, true);
                                                             }
      }
    } catch (Throwable jjte003) {
if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
    } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
    }
  }

  final public void orderdedFiniteNonperiodicTagSet() throws ParseException {
    E();
    orderdedFiniteNonperiodicTagSet1();
  }

  final public void orderdedFiniteNonperiodicTagSet1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TO:{
SimpleNode jjtn001 = new SimpleNode(JJTORDEREDFINITENONPERIODICTAGSET_LOWERUPPER);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TO);
        E();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STEP:{
          jj_consume_token(STEP);
          E();
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
      }
      break;
      }
    default:
      jj_la1[64] = jj_gen;
SimpleNode jjtn002 = new SimpleNode(JJTORDEREDFINITENONPERIODICTAGSET_ENUMERATED);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[63] = jj_gen;
            break label_14;
          }
          jj_consume_token(COMMA);
          E();
        }
      } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
    }
adjustPosition();
  }

  void adjustPosition() throws ParseException {SimpleNode tailE=(SimpleNode)jjtree.popNode(); //this is {2,3}
        SimpleNode firstE =(SimpleNode)jjtree.popNode();// this is 1
        int length=tailE.children.length;
        SimpleNode lastE=(SimpleNode)tailE.children[length-1];
        Vector tailECopy=new Vector(); //copy of all the tailE
        for(int i=0; i<length; i++)
        {
                tailECopy.addElement(tailE.children[i]);
        }

        for(int i=0; i<length; i++)
        {
                SimpleNode tempNode=(SimpleNode)tailECopy.elementAt(i);
                tailE.jjtAddChild(tempNode, i+1); //move the current Es in tailE to the next position in order to insert the firstE as the first child
        }

        tailE.jjtAddChild(firstE, 0);
        jjtree.pushNode(tailE);
  }

  final public void orderedInfinitePeriodicTagSet() throws ParseException {
SimpleNode jjtn002 = new SimpleNode(JJTORDEREDINFINITEPERIODICTAGSET);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
    try {
      jj_consume_token(LT);
SimpleNode jjtn001 = new SimpleNode(JJTPERIOD);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        E();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[65] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          E();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      jj_consume_token(GT);
    } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
    }
  }

  final public void orderedInfiniteNonperiodicTagSet() throws ParseException {
    if (jj_2_25(100)) {
SimpleNode jjtn001 = new SimpleNode(JJTORDEREDINFINITENONPERIODICTAGSET_LOWER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        E();
        jj_consume_token(TO);
        jj_consume_token(PLUSINF);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STEP:{
          jj_consume_token(STEP);
          E();
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUSINF:{
        jj_consume_token(MINUSINF);
        jj_consume_token(TO);
        orderedInfiniteNonperiodicTagSet1();
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void orderedInfiniteNonperiodicTagSet1() throws ParseException {
    if (jj_2_26(100)) {
SimpleNode jjtn001 = new SimpleNode(JJTORDEREDINFINITENONPERIODICTAGSET_UPPER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        E();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STEP:{
          jj_consume_token(STEP);
          E();
          break;
          }
        default:
          jj_la1[68] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUSINF:{
SimpleNode jjtn002 = new SimpleNode(JJTORDEREDINFINITENONPERIODICTAGSET_INFINITY);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(PLUSINF);
        } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
        }
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void unorderedFinitePeriodicTagSet() throws ParseException {
SimpleNode jjtn003 = new SimpleNode(JJTUNORDEREDFINITEPERIODICTAGSET);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
    try {
      jj_consume_token(LT);
SimpleNode jjtn001 = new SimpleNode(JJTPERIOD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        E();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[70] = jj_gen;
            break label_16;
          }
          jj_consume_token(COMMA);
          E();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      jj_consume_token(GT);
      jj_consume_token(COLON);
SimpleNode jjtn002 = new SimpleNode(JJTTIMES);
                                                     boolean jjtc002 = true;
                                                     jjtree.openNodeScope(jjtn002);
      try {
        INTEGER();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                       jjtree.clearNodeScope(jjtn002);
                                                       jjtc002 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte002 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte002;}
                                                     }
                                                     if (jjte002 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte002;}
                                                     }
                                                     {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                       jjtree.closeNodeScope(jjtn002, true);
                                                     }
      }
    } catch (Throwable jjte003) {
if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
    } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
    }
  }

  final public void unorderedFiniteNonperiodicTagSet() throws ParseException {
SimpleNode jjtn001 = new SimpleNode(JJTUNORDEREDFINITENONPERIODICTAGSET);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      E();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[71] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        E();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
  }

  final public void unorderedInfinitePeriodicTagSet() throws ParseException {
SimpleNode jjtn002 = new SimpleNode(JJTUNORDEREDINFINITEPERIODICTAGSET);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
    try {
      jj_consume_token(LT);
SimpleNode jjtn001 = new SimpleNode(JJTPERIOD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        E();
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[72] = jj_gen;
            break label_18;
          }
          jj_consume_token(COMMA);
          E();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      jj_consume_token(GT);
    } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
    }
  }

// Note: Because of the scope issue, we have to put #ID at this position so that jjtThis can work properly
  final public void ID() throws ParseException {/*@bgen(jjtree) ID */
        SimpleNode jjtn000 = new SimpleNode(JJTID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      // for example, we cannot put #ID over here, or jjtThis will not refer to Node ID.
              oToken = jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setImage(oToken.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void INTEGER() throws ParseException {/*@bgen(jjtree) INTEGER */
        SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      oToken = jj_consume_token(INTEGER_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setType(0);
                jjtn000.setImage(oToken.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FLOAT() throws ParseException {/*@bgen(jjtree) FLOAT */
        SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      oToken = jj_consume_token(FLOATING_POINT_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setType(1);
                jjtn000.setImage(oToken.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void STRING() throws ParseException {/*@bgen(jjtree) STRING */
        SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      oToken = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setType(2);
                jjtn000.setImage(oToken.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * JLucid embed()
 */
  final public void embed() throws ParseException {/*@bgen(jjtree) EMBED */
  SimpleNode jjtn000 = new SimpleNode(JJTEMBED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EMBED);
      jj_consume_token(LPAREN);
      url();
      jj_consume_token(COMMA);
      jj_consume_token(STRING_LITERAL);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[73] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        E();
      }
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * [E, E, E, ...]
 */
  final public void ARRAY() throws ParseException {/*@bgen(jjtree) ARRAY */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      E();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        E();
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * URL -> CHARACTER_LITERAL | STRING_LITERAL.
 */
  final public void url() throws ParseException {/*@bgen(jjtree) URL */
        SimpleNode jjtn000 = new SimpleNode(JJTURL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token oToken;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHARACTER_LITERAL:{
        oToken = jj_consume_token(CHARACTER_LITERAL);
        break;
        }
      case STRING_LITERAL:{
        oToken = jj_consume_token(STRING_LITERAL);
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setImage(oToken.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_3R_182()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_72()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_187()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(ORDERED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_54()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_scan_token(NALA)) return true;
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_scan_token(NASA)) return true;
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_scan_token(NRWVR)) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_scan_token(NWVR)) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_scan_token(RWVR)) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_scan_token(NRUPON)) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(NUPON)) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(RUPON)) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_scan_token(PBY)) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(ZEROOBSERVATION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(ALA)) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(UPON)) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(ASA)) return true;
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(WVR)) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(FBY)) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_scan_token(NOOBSERVATION)) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(MAPTO)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_154()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(MINUSINF)) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_22()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(EVIDENTIALSTATEMENT)) return true;
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    if (jj_3R_26()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(OBSERVATIONSEQUENCE)) return true;
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(OBSERVATION)) return true;
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(PLUSINF)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(DIMENSION)) return true;
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(BOD)) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_110()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(EOD)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    }
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(EMBED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_140()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    if (jj_3R_26()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_26()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(FI)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_21()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_22()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(STEP)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_138()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(STEP)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_185()
 {
    if (jj_scan_token(PLUSINF)) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(MINUSINF)) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_22()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_scan_token(PLUSINF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(ISBOX)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_scan_token(STEP)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(ISSET)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(ISBOD)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(ISEOD)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(ISEMPTY)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(PL)) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_scan_token(TO)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(BEL)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(PRELAST)) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(LAST)) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(SECOND)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(PREV)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(NEXT)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_scan_token(FIRST)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(INFINITE)) return true;
    if (jj_scan_token(PERIODIC)) return true;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(DIRECTEDRANGE)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(UNDIRECTEDRANGE)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(ISIN)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(ISSUBCONTEXT)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(CHOOSE)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(INTERSECTION)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(SUBSTITUTION)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(DIFFERENCE)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(HIDING)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(PROJECTION)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(OVERRIDE)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(EXTRACT)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    return false;
  }

  private boolean jj_3_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_186()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_26()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(UNORDERED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_scan_token(LCURB)) return true;
    if (jj_3R_55()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURB)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ForensicLucidParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[76];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xc0000000,0x0,0x601000,0xc0020000,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0621400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x800000,0x200000,0x0,0x400000,0x800000,0x400000,0x0,0x200000,0x800000,0x2000000,0x4000000,0x4000000,0x1000000,0x2000000,0x4000000,0x4000000,0x400000,0x800000,0x2000000,0x4000000,0x4000000,0x1000000,0x0,0x100000,0x0,0x80000,0x0,0x100000,0x80000000,0x100000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x600000,0x180,0x60,0x40018,0x1e0,0x4610000,0xfc00,0x0,0x80000000,0x8461fc00,0x8461fc00,0x0,0x0,0x0,0x0,0x3820000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x200,0x200,0x200,0x6401ff,0x0,0x0,0x0,0x18,0x40000000,0x0,0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x18000,0x0,0x0,0x0,0x0,0x1fff,0x1fff,0x1fff,0x0,0x0,0x0,0x0,0xff9e0000,0x0,0x18000,0x0,0x0,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x53225cff,0x0,0x0,0x0,0x2000,0x0,0x50002000,0x50002000,0x0,0x0,0x0,0x50000000,0x0,0x3220000,0xe7,0x0,0x0,0x1cff,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x53225cff,0x0,0x0,0x40000000,0x10000000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x10,0x0,0x10,0x10,0x8,0x8,0x8,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x8,0x8,0x0,0x20,0x0,0x0,0x0,0x1,0x8,0x8,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x1,0x0,0x0,0x8,0x1,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x8,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x8,0x8,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[26];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ForensicLucidParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ForensicLucidParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ForensicLucidParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 76; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 76; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ForensicLucidParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ForensicLucidParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 76; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 76; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ForensicLucidParser(ForensicLucidParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 76; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ForensicLucidParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 76; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[135];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 76; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 135; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
