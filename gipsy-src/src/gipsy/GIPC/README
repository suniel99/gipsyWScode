***************************  README  *************************

     The GIPL/SIPL/Translator module of the GIPSY System

28 September 2002  20:00                   By:   Chun Lei Ren

             Editorializing and maitenance by: Serguei Mokhov

$Date: 2005/06/15 04:28:46 $
$Revision: 1.7 $, by $Author: mokhov $

**************************************************************

1. Composition:
   ============

The GIPL/SIPL Parser module contains a bunch of files which compose a modules
as well as standalone Java application. Those files fall into several categories:
the stub, GIPL parser, SIPL parsers, SIPL to GIPL translators, GICF, and Preprocessing
modules. There is a grammar file of GIPL, gipsy/GIPC/GIPL/compiler/parser/GIPL.jjt,
the grammar file of Indexical Lucid, gipsy/GIPC/SIPL/IndexicalLucid/IndexicalLucid.jjt,
and a testing files, gipsy/tests/lucid/test.ipl (an Indexical Lucid program),
gipsy/tests/lucid/t1.ipl (a GIPL program), gipsy/tests/gipsy/langauge-mix.ipl (a GIPSY
program with a mix of intensional and imperative languages).

* The Stub
  --------

  Includes:

  - Facet.java, the facet layer between other GIPSY modules and GIPL/SIPL/Translator module,
  - Lucid.java, the entry class of the whole application, mimical stub of the module.
  - GIPC.java - the meta processor that drives the entire compilation process of a GIPSY program.

  Those 3 files are implemented totally manually, of course no compiler construction tools
  support generating them, and there's no need to do so.

  Location: gipsy/GIPC


* Shared IPL Parser Files
  -----------------------

  gipsy/GIPC/util/SimpleCharStream.java,
    generated by JavaCC/JJTree, no customization, this is a shared file
    by all parsers,

  gipsy/GIPC/util/Node.java,
    generated by JavaCC/JJTree, no customization, shared java file,

  gipsy/GIPC/util/ParseException.java,
    generated by JavaCC/JJTree, by customizing some error message related methods
    you can have the parser output the demanded error message format, shared java file,

  gipsy/GIPC/SimpleNode.java,
    generated by JavaCC/JJTree, in order to let the parser to generate an AST, we have to
    customize this java file, add new attributes and methods, shared java file among
    GIPL, IndexicalLucid, and DFGAnalyzer parsers.


* The GIPL Parser
  ---------------

  gipsy/GIPC/GIPL/compiler/parser/GIPLParser.java,
	main body of GIPL parser, generated by JavaCC/JJTree, no more customization
	to this file,

  gipsy/GIPC/GIPL/compiler/parser/GIPLParserConstants.java,
	which record the constants used in GIPL parser, generated by JavaCC/JJTree,
	no customization,

  gipsy/GIPC/GIPL/compiler/parser/GIPLParserTokenManager.java,
	the token manager of GIPL parser, generated by JavaCC/JJTree,
	no customization,

  gipsy/GIPC/GIPL/compiler/parser/GIPLParserTreeConstants.java,
	constants of GIPL nodes, generated by JavaCC/JJTree,
	no customization.


* The Indexical Lucid Parser
  --------------------------

  gipsy/GIPC/SIPL/IndexicalLucid/parser/IndexcialLucidParser.java,
	main body of the SIPL parser, generated by JavaCC/JJTree, no more customization
	to this file,

  gipsy/GIPC/SIPL/IndexicalLucid/parser/IndexcialLucidConstants.java,
	which record the constants used in SIPL parser, generated by JavaCC/JJTree,
	no customization,

  gipsy/GIPC/SIPL/IndexicalLucid/parser/IndexcialLucidTokenManager.java,
	the token manager of SIPL parser, generated by JavaCC/JJTree,
	no customization,

  gipsy/GIPC/SIPL/IndexicalLucid/parser/IndexcialLucidTreeConstants.java,
    constants of SIPL nodes, generated by JavaCC/JJTree,
    no customization.


* The SIPL to GIPL Translator
  ---------------------------

  The Translator.java, which was coded manually, by Chun Lei Ren is removed in favour
  of gipsy.GIPC.SIPL.GenericTranslator.* of Aihua Wu, but the original Translator
  class for the time being was made as an internal class of Aihua's Translator.java
  due to some inconsitencies in the API to be resolved. The move and renaming was
  done by Serguei Mokhov while integrating all the parts.


2. Usage:
=========

* Actually, all the files included in the directory compose a standalone Java application. After compiling
  with the command 'javac Lucid.java', you can run this java application to parse your SIPL or GIPL programs.

	However, if you want to start from the very beginning (only those 2 .jjt files), you have to install
	JavaCC/JJTree on your own platform. The latest version of the package is here: <https://javacc.dev.java.net/>.
	the src/tools/javacc directory provides a copy of the javacc and jjtree scripts for both
	Windows and Linux, and the lib directory has the javacc.jar file to be used by those scripts,
	so you can use them to regenerate/refresh the common or otherwise parser files for all 4 parsers.

	NOTE: some generated java files will be re-freshed whenever you start JavaCC or JJTree, such as ParserConstants.java,
	while some won't. JavaCC/JJTree will check if there is such file existing under current working directory.
	For example, first time we start JavaCC/JJTree to generate the parser files, JavaCC/JJTree check and figure out
	that SimpleNode.java doesn't exist under working directory, then they will generate a new SimpleNode.java file.
	After we customize this file and re-start JavaCC/JJTree, since SimpleNode.java has been existed, JavaCC/JJTree
	will not re-generated it again. This is very usful for those customizable java files. We don't have to
	change them every time after we invoke JavaCC/JJTree.

* How to run this application

This java application's name is Lucid. Java VM will give you prompt if you didn't give any parameter.
The usage of the application is:

java Lucid testingFilename ( -G | -S ) -T

-G: means that the testing file is a GIPL program,
-S: means that the testing file is an Indexical Lucid (SIPL) program,
and -T: is optional when the first option is -S, this option means that we need translation from SIPL to GIPL.

EOF
