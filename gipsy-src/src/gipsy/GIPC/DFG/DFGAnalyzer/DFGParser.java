/* Generated By:JJTree&JavaCC: Do not edit this line. DFGParser.java */
package gipsy.GIPC.DFG.DFGAnalyzer;

import gipsy.GIPC.util.ParseException;
import gipsy.GIPC.util.SimpleCharStream;
import gipsy.GIPC.util.Node;
import gipsy.GIPC.util.Token;
import gipsy.GIPC.util.TokenMgrError;

class DFGParser/*@bgen(jjtree)*/implements DFGParserTreeConstants, DFGParserConstants {/*@bgen(jjtree)*/
  protected JJTDFGParserState jjtree = new JJTDFGParserState();public void ParserStart(DFGParser parser, ParserFacet facet)
        {
        //    System.out.println("Reading from standard input...");

                try
                {
                        SimpleNode n=parser.Start();
                        //    n.dump("");
                        facet.treepass(n);
                }
                catch (Exception e)
                {
                        System.err.println("Oops.");
                        System.err.println(e.getMessage());
                        e.printStackTrace(System.err);
                }
        }

  final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      graph();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void graph() throws ParseException {
   SimpleNode jjtn001 = new SimpleNode(JJTDIGRAPH);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(DIGRAPH);
      id();
      jj_consume_token(41);
      stmtlist();
      jj_consume_token(42);
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
    }
  }

  final public void stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
    case NODE:
    case EDGE:
      attrstmt();
      break;
    case IDENTIFIER:
    case 46:
      nodeid();
      ST1();
      break;
    case SUBGRAPH:
      subgraph();
      break;
    case 41:
      jj_consume_token(41);
      ST2();
      jj_consume_token(42);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ST1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINK:
      edgestmt();
      break;
    default:
      jj_la1[1] = jj_gen;
      nodestmt();
    }
  }

  final public void ST2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
    case NODE:
    case EDGE:
      attrstmt();
                                 Node midNode10=jjtree.popNode(); // blace
                                 Node midNode20=jjtree.popNode(); // item
                                 midNode10.jjtSetParent(midNode20);
                                 midNode20.jjtAddChild(midNode10, midNode20.jjtGetNumChildren());
                                 jjtree.pushNode(midNode20);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case NODE:
      case EDGE:
      case IDENTIFIER:
      case 46:
        ST2();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    case IDENTIFIER:
    case 46:
      nodeid();
                                 Node midNode1=jjtree.popNode(); // node
                                 Node midNode2=jjtree.popNode(); // blace
                                 midNode1.jjtSetParent(midNode2);
                                 midNode2.jjtAddChild(midNode1, midNode2.jjtGetNumChildren());
                                 jjtree.pushNode(midNode2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case NODE:
      case EDGE:
      case IDENTIFIER:
      case 46:
        ST2();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void attrstmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
    SimpleNode jjtn001 = new SimpleNode(JJTGRAPH);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(GRAPH);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case NODE:
                     SimpleNode jjtn002 = new SimpleNode(JJTNODE);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(NODE);
      } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
      }
      break;
    case EDGE:
                                    SimpleNode jjtn003 = new SimpleNode(JJTEDGE);
                                    boolean jjtc003 = true;
                                    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(EDGE);
      } finally {
                                    if (jjtc003) {
                                      jjtree.closeNodeScope(jjtn003, true);
                                    }
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    attrlist();
  }

  final public void attrlist() throws ParseException {
    jj_consume_token(43);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 46:
      alist();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(44);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      attrlist();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void alist() throws ParseException {
    id();
         SimpleNode jjtn001 = new SimpleNode(JJTASSIGN);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(ASSIGN);
    } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001, true);
         }
    }
    id();
                                 Node midNode1=jjtree.popNode(); // right
                                 Node midNode2=jjtree.popNode(); // edgeop
                                 Node midNode3=jjtree.popNode(); // left
                                 midNode1.jjtSetParent(midNode2);
                                 midNode3.jjtSetParent(midNode2);
                                 midNode2.jjtAddChild(midNode3, 0);
                                 midNode2.jjtAddChild(midNode1, 1);
                                 jjtree.pushNode(midNode2);

                                 Node midNode10=jjtree.popNode(); // assign
                                 Node midNode20=jjtree.popNode(); // title
                                 midNode10.jjtSetParent(midNode20);
                                 midNode20.jjtAddChild(midNode10, midNode20.jjtGetNumChildren());
                                 jjtree.pushNode(midNode20);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 46:
      alist();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void nodestmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      attrlist();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  final public void edgestmt() throws ParseException {
    edgeRHS();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      attrlist();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void subgraph() throws ParseException {
  SimpleNode jjtn001 = new SimpleNode(JJTSUB);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(SUBGRAPH);
      id();
      jj_consume_token(41);
      stmtlist();
      jj_consume_token(42);
    } catch (Throwable jjte001) {
  if (jjtc001) {
    jjtree.clearNodeScope(jjtn001);
    jjtc001 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte001 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte001;}
  }
  if (jjte001 instanceof ParseException) {
    {if (true) throw (ParseException)jjte001;}
  }
  {if (true) throw (Error)jjte001;}
    } finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, true);
  }
    }
  }

  final public void stmtlist() throws ParseException {
    stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
    case NODE:
    case EDGE:
    case SUBGRAPH:
    case IDENTIFIER:
    case 41:
    case 46:
      stmtlist();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void edgeop() throws ParseException {
   SimpleNode jjtn001 = new SimpleNode(JJTDIR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(LINK);
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
    }
  }

  final public void edgeRHS() throws ParseException {
    edgeop();
    nodeid();
                                 Node midNode1=jjtree.popNode(); // right
                                 Node midNode2=jjtree.popNode(); // edgeop
                                 Node midNode3=jjtree.popNode(); // left
                                 midNode1.jjtSetParent(midNode2);
                                 midNode3.jjtSetParent(midNode2);
                                 midNode2.jjtAddChild(midNode3, 0);
                                 midNode2.jjtAddChild(midNode1, 1);
                                 jjtree.pushNode(midNode2);
  }

  final public void nodeid() throws ParseException {
    id();
  }

  final public void id() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id2();
      break;
    case 46:
      jj_consume_token(46);
      ST4();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ST4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      ST3();
      jj_consume_token(46);
      break;
    case 46:
                 SimpleNode jjtn001 = new SimpleNode(JJTID);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(46);
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ST3() throws ParseException {
    id2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      ST3();
             Node midNode1=jjtree.popNode();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void id2() throws ParseException {
 /*@bgen(jjtree) ID */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setImage(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  public DFGParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x425e,0x20,0x404e,0x404e,0x404e,0xe,0x4040,0x800,0x4040,0x800,0x800,0x2000,0x425e,0x4040,0x4040,0x40,};
   }

  public DFGParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DFGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public DFGParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DFGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public DFGParser(DFGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(DFGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[47];
    for (int i = 0; i < 47; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
